>>>> App.css
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

>>>> App.jsx
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { AuthProvider } from "./context/AuthContext";
import { ThemeProvider } from "./context/ThemeContext";
import Layout from "./components/Layout";
import ProtectedRoute from "./components/ProtectedRoute";
import Inicio from "./pages/Inicio";
import Perfil from "./pages/Perfil";
import HorasLibres from "./pages/HorasLibres";
import EventosDisponibles from "./pages/EventosDisponibles";
import EventosRegistrados from "./pages/EventosRegistrados";
import FormularioUsuario from "./pages/FormularioUsuario";
import Login from "./pages/Login";

function App() {
  return (
    <ThemeProvider>
      <AuthProvider>
        <Router>
          <Routes>
            {/* Ruta de Login - Sin Layout y sin protección */}
            <Route path="/login" element={<Login />} />
            
            {/* Rutas principales con Layout y protegidas */}
            <Route path="/" element={
              <ProtectedRoute>
                <Layout>
                  <Inicio />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/perfil" element={
              <ProtectedRoute>
                <Layout>
                  <Perfil />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/horas-libres" element={
              <ProtectedRoute>
                <Layout>
                  <HorasLibres />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/eventos-disponibles" element={
              <ProtectedRoute>
                <Layout>
                  <EventosDisponibles />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/eventos-registrados" element={
              <ProtectedRoute>
                <Layout>
                  <EventosRegistrados />
                </Layout>
              </ProtectedRoute>
            } />
            <Route path="/crear-usuario" element={
              <ProtectedRoute>
                <Layout>
                  <FormularioUsuario />
                </Layout>
              </ProtectedRoute>
            } />
          </Routes>
        </Router>
      </AuthProvider>
    </ThemeProvider>
  );
}

export default App;

>>>> App.test.js
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

>>>> assets/index.js
// export images
import ingenio from './ingeniotic.jpg';
import unabfest from './unabfest.jpg';
import semanaIngenieria from './semana-ingenieria.jpg';
import ulibrio from './ulibro.jpg';

export { ingenio };
export { unabfest };
export { semanaIngenieria };
export { ulibrio };
>>>> components/Announcements.jsx
import React from 'react';

function Announcements() {
  const announcements = [
    {
      id: 1,
      title: 'Inscripciones abiertas para Semestre 2025-2',
      date: '2025-05-15',
      content: 'Las inscripciones para el semestre 2025-2 están abiertas. Por favor, consulta las fechas importantes en el calendario académico.',
      category: 'Académico',
      priority: 'alta'
    },
    {
      id: 2,
      title: 'Mantenimiento programado en sistemas UNAB',
      date: '2025-05-16',
      content: 'El sistema de gestión académica estará en mantenimiento el sábado 20 de mayo de 8:00 AM a 12:00 PM.',
      category: 'Sistemas',
      priority: 'media'
    },
    {
      id: 3,
      title: 'Convocatoria Becas de Excelencia',
      date: '2025-05-12',
      content: 'Se han abierto las convocatorias para las Becas de Excelencia Académica 2025-2. Los estudiantes interesados pueden aplicar hasta el 30 de mayo.',
      category: 'Financiero',
      priority: 'alta'
    }
  ];

  const getPriorityClass = (priority) => {
    switch (priority) {
      case 'alta':
        return 'bg-red-100 text-red-800';
      case 'media':
        return 'bg-yellow-100 text-yellow-800';
      case 'baja':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const formatDate = (dateString) => {
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('es-ES', options);
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <h3 className="text-xl font-bold text-gray-800 mb-4">Anuncios Importantes</h3>
      
      <div className="space-y-4">
        {announcements.map((announcement) => (
          <div key={announcement.id} className="border border-gray-200 rounded-lg p-4 hover:shadow-sm transition-shadow">
            <div className="flex justify-between items-start mb-2">
              <h4 className="font-semibold text-gray-800">{announcement.title}</h4>
              <span className={`${getPriorityClass(announcement.priority)} text-xs font-medium py-1 px-2 rounded`}>
                {announcement.category}
              </span>
            </div>
            
            <p className="text-sm text-gray-600 mb-3">
              {announcement.content}
            </p>
            
            <div className="flex justify-between items-center">
              <span className="text-xs text-gray-500">
                Publicado: {formatDate(announcement.date)}
              </span>
              
              <button className="text-green-700 hover:text-green-800 text-sm font-medium inline-flex items-center">
                Leer más
                <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                </svg>
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default Announcements;
>>>> components/EventsPreview.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import {ingenio, semanaIngenieria, ulibrio, unabfest} from '../assets';
// Eliminamos la importación de eventos si no la estamos usando

const EventsPreview = () => {
  // Eventos destacados
  const upcomingEvents = [
    { 
      id: 1, 
      nombre: "IngeniOTIC 2025", 
      fecha: "2025-06-15",
      descripcion: "Evento de innovación tecnológica organizado por la facultad de Ingeniería.",
      imagen: ingenio,
      horas: 8,
      lugar: "Auditorio Mayor"
    },
    { 
      id: 2, 
      nombre: "UNAB Fest", 
      fecha: "2025-05-28",
      descripcion: "Festival cultural con actividades artísticas y musicales para toda la comunidad universitaria.",
      imagen: unabfest,
      horas: 6,
      lugar: "Campus El Jardín"
    },
    { 
      id: 3, 
      nombre: "Semana de Ingeniería", 
      fecha: "2025-07-10",
      descripcion: "Conferencias, talleres y competencias organizadas por la facultad de Ingeniería.",
      imagen: semanaIngenieria,
      horas: 10,
      lugar: "Bloque D"
    },
    { 
      id: 4, 
      nombre: "ULIBRO 2025", 
      fecha: "2025-08-20",
      descripcion: "Feria del libro con presentaciones de autores nacionales e internacionales.",
      imagen: ulibrio,
      horas: 5,
      lugar: "Centro de Convenciones Neomundo"
    }
  ];

  const formatDate = (dateString) => {
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('es-ES', options);
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-xl font-bold text-gray-800">Próximos Eventos</h3>
        <Link to="/eventos-disponibles" className="text-green-700 hover:text-green-800 font-medium">
          Ver todos
        </Link>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {upcomingEvents.map((event) => (
          <div key={event.id} className="border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow">
            <div className="h-40 bg-gray-200 overflow-hidden">
              {/* Reemplazamos el placeholder SVG por la imagen real */}
              <img 
                src={event.imagen} 
                alt={event.nombre}
                className="w-full h-full object-cover" 
              />
            </div>
            
            <div className="p-4">
              <div className="flex justify-between items-start mb-2">
                <h4 className="font-semibold text-gray-800">{event.nombre}</h4>
                <span className="bg-green-100 text-green-800 text-xs font-medium py-1 px-2 rounded">
                  {event.horas} horas
                </span>
              </div>
              
              <div className="flex items-center text-sm text-gray-600 mb-2">
                <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                {formatDate(event.fecha)}
              </div>
              
              <div className="flex items-center text-sm text-gray-600 mb-3">
                <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                </svg>
                {event.lugar}
              </div>
              
              <p className="text-sm text-gray-600 mb-3 line-clamp-2">
                {event.descripcion}
              </p>
              
              <div className="flex justify-between items-center">
                <Link 
                  to={`/eventos-disponibles?id=${event.id}`}
                  className="text-green-700 hover:text-green-800 text-sm font-medium inline-flex items-center"
                >
                  Más información
                  <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                  </svg>
                </Link>
                
                <Link 
                  to={`/eventos-disponibles?id=${event.id}&register=true`}
                  className="text-white bg-green-700 hover:bg-green-800 text-sm font-medium py-1 px-3 rounded transition duration-300"
                >
                  Inscribirme
                </Link>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default EventsPreview;
>>>> components/Header.jsx
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import ThemeToggleButton from './ThemeToggleButton';

const Header = () => {
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  return (
    <header className="bg-green-700 dark:bg-green-800 text-white shadow-lg transition-colors duration-200">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center py-4">
          {/* Logo y nombre */}
          <div className="flex items-center">
            <Link to="/" className="flex items-center">
              <div className="h-10 w-10 rounded-full bg-white flex items-center justify-center mr-3">
                <span className="text-green-700 dark:text-green-800 font-bold text-lg">U</span>
              </div>
              <div>
                <h1 className="text-xl font-bold">Portal Estudiantil</h1>
                <p className="text-sm text-green-100 dark:text-green-200">UNAB</p>
              </div>
            </Link>
          </div>

          {/* Navegación Desktop */}
          <nav className="hidden md:flex space-x-6">
            <Link 
              to="/" 
              className="hover:text-green-200 dark:hover:text-green-300 transition duration-300 px-3 py-2 rounded-md text-sm font-medium"
            >
              Inicio
            </Link>
            <Link 
              to="/eventos-disponibles" 
              className="hover:text-green-200 dark:hover:text-green-300 transition duration-300 px-3 py-2 rounded-md text-sm font-medium"
            >
              Eventos
            </Link>
            <Link 
              to="/horas-libres" 
              className="hover:text-green-200 dark:hover:text-green-300 transition duration-300 px-3 py-2 rounded-md text-sm font-medium"
            >
              Horas Libres
            </Link>
            <Link 
              to="/perfil" 
              className="hover:text-green-200 dark:hover:text-green-300 transition duration-300 px-3 py-2 rounded-md text-sm font-medium"
            >
              Mi Perfil
            </Link>
          </nav>

          {/* Usuario, Tema y Logout */}
          <div className="hidden md:flex items-center space-x-4">
            <div className="text-right">
              <p className="text-sm font-medium">Bienvenido,</p>
              <p className="text-xs text-green-100 dark:text-green-200">{user?.username}</p>
            </div>
            
            {/* Botón de alternancia de tema */}
            <ThemeToggleButton />
            
            <button
              onClick={handleLogout}
              className="bg-green-600 dark:bg-green-700 hover:bg-green-500 dark:hover:bg-green-600 px-4 py-2 rounded-md text-sm font-medium transition duration-300 flex items-center"
            >
              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
              </svg>
              Cerrar Sesión
            </button>
          </div>

          {/* Botón menú móvil */}
          <div className="md:hidden flex items-center space-x-2">
            {/* Botón de tema para móvil */}
            <ThemeToggleButton />
            
            <button
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="text-white hover:text-green-200 dark:hover:text-green-300 focus:outline-none focus:text-green-200 dark:focus:text-green-300"
            >
              <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                {isMenuOpen ? (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                ) : (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h16" />
                )}
              </svg>
            </button>
          </div>
        </div>

        {/* Menú móvil */}
        {isMenuOpen && (
          <div className="md:hidden">
            <div className="px-2 pt-2 pb-3 space-y-1 border-t border-green-600 dark:border-green-700">
              <Link 
                to="/" 
                className="block hover:bg-green-600 dark:hover:bg-green-700 px-3 py-2 rounded-md text-base font-medium"
                onClick={() => setIsMenuOpen(false)}
              >
                Inicio
              </Link>
              <Link 
                to="/eventos-disponibles" 
                className="block hover:bg-green-600 dark:hover:bg-green-700 px-3 py-2 rounded-md text-base font-medium"
                onClick={() => setIsMenuOpen(false)}
              >
                Eventos
              </Link>
              <Link 
                to="/horas-libres" 
                className="block hover:bg-green-600 dark:hover:bg-green-700 px-3 py-2 rounded-md text-base font-medium"
                onClick={() => setIsMenuOpen(false)}
              >
                Horas Libres
              </Link>
              <Link 
                to="/perfil" 
                className="block hover:bg-green-600 dark:hover:bg-green-700 px-3 py-2 rounded-md text-base font-medium"
                onClick={() => setIsMenuOpen(false)}
              >
                Mi Perfil
              </Link>
              <div className="border-t border-green-600 dark:border-green-700 pt-3 mt-3">
                <div className="px-3 py-2">
                  <p className="text-sm text-green-100 dark:text-green-200">Conectado como:</p>
                  <p className="text-sm font-medium">{user?.username}</p>
                </div>
                <button
                  onClick={() => {
                    handleLogout();
                    setIsMenuOpen(false);
                  }}
                  className="w-full text-left bg-green-600 dark:bg-green-700 hover:bg-green-500 dark:hover:bg-green-600 px-3 py-2 rounded-md text-sm font-medium transition duration-300 flex items-center"
                >
                  <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                  </svg>
                  Cerrar Sesión
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </header>
  );
};

export default Header;
>>>> components/Hero.jsx
import React from 'react';
import { Link } from 'react-router-dom';

const Hero = () => {
  // Function to handle smooth scrolling
  const scrollToSection = (sectionId) => {
    const element = document.getElementById(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' });
    }
  };

  return (
    <div className="relative bg-green-700 text-white">
      <div className="absolute inset-0 bg-black opacity-30"></div>
      <div className="container mx-auto px-4 py-16 relative z-10">
        <div className="max-w-2xl">
          <h1 className="text-4xl md:text-5xl font-bold mb-4">
            Bienvenido al Portal Estudiantil UNAB
          </h1>
          <p className="text-lg md:text-xl opacity-90 mb-8">
            Tu plataforma integral para gestionar tus actividades académicas, eventos y horas libres.
          </p>
          <div className="flex flex-wrap gap-4">
            <button 
              onClick={() => scrollToSection('eventos')}
              className="bg-white text-green-700 hover:bg-gray-100 font-bold py-3 px-6 rounded-lg transition duration-300"
            >
              Explorar Eventos
            </button>
            <Link 
              to="/perfil"
              className="bg-transparent hover:bg-green-800 border-2 border-white font-bold py-3 px-6 rounded-lg transition duration-300 inline-block"
            >
              Ver mi Perfil
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Hero;
>>>> components/HorasLibresStats.jsx
import React from 'react';

const HorasLibresStats = () => {
  // Datos de ejemplo para las estadísticas
  const stats = [
    {
      label: 'Horas Acumuladas',
      value: 35,
      icon: (
        <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
        </svg>
      ),
      bgColor: 'bg-green-100',
      textColor: 'text-green-800'
    },
    {
      label: 'Horas Requeridas',
      value: 48,
      icon: (
        <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
        </svg>
      ),
      bgColor: 'bg-blue-100',
      textColor: 'text-blue-800'
    },
    {
      label: 'Horas Faltantes',
      value: 13,
      icon: (
        <svg className="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      ),
      bgColor: 'bg-yellow-100',
      textColor: 'text-yellow-800'
    },
    {
      label: 'Eventos Inscritos',
      value: 3,
      icon: (
        <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
        </svg>
      ),
      bgColor: 'bg-purple-100',
      textColor: 'text-purple-800'
    }
  ];

  return (
    <div className="p-6 bg-white rounded-lg shadow-md">
      <h3 className="text-lg font-semibold text-gray-800 mb-4">Resumen de Horas Libres</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-4">
        {stats.map((stat, index) => (
          <div 
            key={index} 
            className={`${stat.bgColor} ${stat.textColor} rounded-lg p-4 flex items-center`}
          >
            <div className="mr-4">
              {stat.icon}
            </div>
            <div>
              <p className="text-sm font-medium">{stat.label}</p>
              <p className="text-2xl font-bold">{stat.value}</p>
            </div>
          </div>
        ))}
      </div>
      
      <div className="mt-6">
        <div className="flex justify-between mb-1">
          <h4 className="font-medium text-gray-700">Progreso Total</h4>
          <span className="text-sm font-medium text-gray-700">
            58% Completado
          </span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2.5">
          <div 
            className="bg-green-600 h-2.5 rounded-full" 
            style={{ width: '58%' }}
          ></div>
        </div>
        <p className="text-sm text-gray-600 mt-2">
          Te faltan 13 horas libres para completar el requisito.
        </p>
      </div>
    </div>
  );
};

export default HorasLibresStats;
>>>> components/Layout.jsx
import React from 'react';
import Header from './Header';

const Layout = ({ children }) => {
  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <main className="flex-grow">
        {children}
      </main>
    </div>
  );
};

export default Layout;
>>>> components/ProfilePreview.jsx
import React from 'react';
import { estudiante } from '../data/estudiante';

const ProfilePreview = () => {
  const { nombre, semestre, cursos, horasLibres } = estudiante;
  const horasRequeridas = 48; // Suponiendo que se requieren 60 horas libres
  const horasFaltantes = Math.max(0, horasRequeridas - horasLibres);
  const porcentajeCompletado = Math.min(100, (horasLibres / horasRequeridas) * 100);

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <div className="flex items-center mb-4">
        <div className="h-16 w-16 rounded-full bg-green-100 flex items-center justify-center">
          <span className="text-2xl font-bold text-green-700">{nombre.charAt(0)}</span>
        </div>
        <div className="ml-4">
          <h3 className="text-xl font-bold text-gray-800">{nombre}</h3>
          <p className="text-gray-600">Semestre {semestre}</p>
        </div>
      </div>

      <div className="mb-4">
        <h4 className="font-semibold text-gray-700 mb-2">Cursos Actuales</h4>
        <ul className="space-y-1">
          {cursos.map((curso, index) => (
            <li key={index} className="text-gray-600 flex items-center">
              <svg className="w-4 h-4 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              {curso}
            </li>
          ))}
        </ul>
      </div>

      <div>
        <div className="flex justify-between mb-1">
          <h4 className="font-semibold text-gray-700">Horas Libres</h4>
          <span className="text-sm font-medium text-gray-700">
            {horasLibres}/{horasRequeridas} horas
          </span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2.5">
          <div 
            className="bg-green-600 h-2.5 rounded-full" 
            style={{ width: `${porcentajeCompletado}%` }}
          ></div>
        </div>
        <p className="text-sm text-gray-600 mt-2">
          {horasFaltantes > 0 
            ? `Te faltan ${horasFaltantes} horas para completar el requisito.`
            : "¡Has completado todas las horas requeridas!"
          }
        </p>
      </div>
    </div>
  );
};

export default ProfilePreview;
>>>> components/ProtectedRoute.jsx
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const ProtectedRoute = ({ children }) => {
  const { isAuthenticated } = useAuth();
  
  return isAuthenticated ? children : <Navigate to="/login" replace />;
};

export default ProtectedRoute;
>>>> components/QuickLinks.jsx
import React from 'react';
import { Link } from 'react-router-dom';

const QuickLinks = () => {
  const links = [
    {
      title: 'Notas',
      description: 'Consulta tus calificaciones',
      icon: (
        <svg className="w-8 h-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
        </svg>
      ),
      url: 'https://cosmos.unab.edu.co',
      external: true,
      color: 'bg-purple-100'
    },
    {
      title: 'Cursos',
      description: 'Accede a tus materias',
      icon: (
        <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path d="M12 14l9-5-9-5-9 5 9 5z"></path>
          <path d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z"></path>
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222"></path>
        </svg>
      ),
      url: 'https://miportalu.unab.edu.co/index.php',
      external: true,
      color: 'bg-blue-100'
    },
    {
      title: 'Crear Usuario',
      description: 'Crea un nuevo usuario',
      icon: (
        <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
        </svg>
      ),
      url: '/crear-usuario',
      external: true,
      color: 'bg-green-100'
    },
    {
      title: 'Horas Libres',
      description: 'Gestiona tus horas libres',
      icon: (
        <svg className="w-8 h-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      ),
      url: '/horas-libres',
      external: false,
      color: 'bg-yellow-100'
    },
    {
      title: 'Eventos',
      description: 'Eventos disponibles',
      icon: (
        <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z"></path>
        </svg>
      ),
      url: '/eventos-disponibles',
      external: false,
      color: 'bg-red-100'
    },
    {
      title: 'Mi Perfil',
      description: 'Gestiona tu información',
      icon: (
        <svg className="w-8 h-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
        </svg>
      ),
      url: '/perfil',
      external: false,
      color: 'bg-indigo-100'
    }
  ];

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <h3 className="text-xl font-bold text-gray-800 mb-4">Enlaces Rápidos</h3>
      <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
        {links.map((link, index) => (
          <div key={index}>
            {link.external ? (
              <a 
                href={link.url} 
                target="_blank" 
                rel="noopener noreferrer"
                className={`${link.color} rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105`}
              >
                {link.icon}
                <h4 className="font-semibold mt-2">{link.title}</h4>
                <p className="text-xs text-gray-600 text-center mt-1">{link.description}</p>
              </a>
            ) : (
              <Link 
                to={link.url}
                className={`${link.color} rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105`}
              >
                {link.icon}
                <h4 className="font-semibold mt-2">{link.title}</h4>
                <p className="text-xs text-gray-600 text-center mt-1">{link.description}</p>
              </Link>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default QuickLinks;
>>>> components/ThemeToggleButton.jsx
import React from 'react';
import { useTheme } from '../context/ThemeContext';

const ThemeToggleButton = () => {
  const { isDarkMode, toggleTheme } = useTheme();

  return (
    <button
      onClick={toggleTheme}
      className="relative p-2 rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors duration-200"
      aria-label={isDarkMode ? 'Cambiar a modo claro' : 'Cambiar a modo oscuro'}
      title={isDarkMode ? 'Cambiar a modo claro' : 'Cambiar a modo oscuro'}
    >
      {/* Icono de Sol (Modo Claro) */}
      <svg
        className={`w-5 h-5 text-yellow-500 transition-all duration-300 ${
          isDarkMode ? 'opacity-0 rotate-180 scale-0' : 'opacity-100 rotate-0 scale-100'
        } absolute inset-2`}
        fill="currentColor"
        viewBox="0 0 20 20"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          fillRule="evenodd"
          d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
          clipRule="evenodd"
        />
      </svg>
      
      {/* Icono de Luna (Modo Oscuro) */}
      <svg
        className={`w-5 h-5 text-blue-300 transition-all duration-300 ${
          isDarkMode ? 'opacity-100 rotate-0 scale-100' : 'opacity-0 -rotate-180 scale-0'
        } absolute inset-2`}
        fill="currentColor"
        viewBox="0 0 20 20"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
      </svg>
      
      {/* Espacio invisible para mantener el tamaño del botón */}
      <div className="w-5 h-5 opacity-0"></div>
    </button>
  );
};

export default ThemeToggleButton;
>>>> components/WelcomeBanner.jsx
import React, { useState } from 'react';

const WelcomeBanner = () => {
  const [isVisible, setIsVisible] = useState(true);

  const closeBanner = () => {
    setIsVisible(false);
  };

  if (!isVisible) return null;

  return (
    <div className="bg-blue-50 border-l-4 border-blue-500 p-4 rounded-lg mb-6">
      <div className="flex items-start">
        <div className="flex-shrink-0">
          <svg className="h-5 w-5 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
          </svg>
        </div>
        <div className="ml-3 flex-1">
          <h3 className="text-sm leading-5 font-medium text-blue-800">Información importante</h3>
          <div className="mt-2 text-sm leading-5 text-blue-700">
            <p>
              Bienvenido al Portal Estudiantil UNAB. Recuerda que el periodo de inscripción para el semestre 2025-2 está abierto hasta el 30 de mayo.
            </p>
            <div className="mt-4">
              <div className="-mx-2 -my-1.5 flex">
                <button 
                  type="button" 
                  className="px-3 py-1.5 bg-blue-100 text-blue-800 text-xs leading-4 font-medium rounded-md hover:bg-blue-200 focus:outline-none focus:bg-blue-200 transition ease-in-out duration-150"
                >
                  Más información
                </button>
                <button 
                  type="button"
                  onClick={closeBanner}
                  className="ml-3 px-3 py-1.5 bg-blue-100 text-blue-800 text-xs leading-4 font-medium rounded-md hover:bg-blue-200 focus:outline-none focus:bg-blue-200 transition ease-in-out duration-150"
                >
                  Cerrar
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default WelcomeBanner;
>>>> context/AuthContext.js
import React, { createContext, useContext, useState } from 'react';

// Crear el contexto
const AuthContext = createContext();

// Hook personalizado para usar el contexto
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth debe ser usado dentro de un AuthProvider');
  }
  return context;
};

// Proveedor del contexto
export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState(null);

  const login = (username) => {
    setIsAuthenticated(true);
    setUser({ username });
  };

  const logout = () => {
    setIsAuthenticated(false);
    setUser(null);
  };

  const value = {
    isAuthenticated,
    user,
    login,
    logout
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};
>>>> context/ThemeContext.js
import React, { createContext, useContext, useState, useEffect } from 'react';

// Crear el contexto del tema
const ThemeContext = createContext();

// Hook personalizado para usar el contexto del tema
export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme debe ser usado dentro de un ThemeProvider');
  }
  return context;
};

// Proveedor del contexto del tema
export const ThemeProvider = ({ children }) => {
  // Inicializar el tema desde localStorage o usar 'light' por defecto
  const [isDarkMode, setIsDarkMode] = useState(() => {
    const savedTheme = localStorage.getItem('theme');
    return savedTheme === 'dark';
  });

  // Alternar entre modo claro y oscuro
  const toggleTheme = () => {
    setIsDarkMode(prevMode => !prevMode);
  };

  // Efecto para aplicar la clase 'dark' al documento y guardar en localStorage
  useEffect(() => {
    const root = window.document.documentElement;
    
    if (isDarkMode) {
      root.classList.add('dark');
      localStorage.setItem('theme', 'dark');
    } else {
      root.classList.remove('dark');
      localStorage.setItem('theme', 'light');
    }
  }, [isDarkMode]);

  const value = {
    isDarkMode,
    toggleTheme
  };

  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
};
>>>> data/estudiante.js
export const estudiante = {
  nombre: "Laura Martínez",
  semestre: 3,
  cursos: ["Álgebra Lineal", "Programación II", "Estadística"],
  horasLibres: 35,
  eventosRegistrados: [
    { id: 1, nombre: "Taller de Innovación", fecha: "2025-05-10" },
    { id: 2, nombre: "Hackathon UNAB", fecha: "2025-06-01" }
  ]
};

>>>> data/eventos.js
export const eventos = [
    { id: 1, nombre: "Taller de Innovación", fecha: "2025-05-10" },
    { id: 2, nombre: "Hackathon UNAB", fecha: "2025-06-01" }
]

>>>> index.css
@tailwind base;
@tailwind components;
@tailwind utilities;


/* Scroll suave */
html {
  scroll-behavior: smooth;
}

/* Ensure the body covers the full viewport */
body {
  margin: 0;
  padding: 0;
  min-height: 100vh;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#root {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}
/* Clases base para modo oscuro */
.dark {
  color-scheme: dark;
}

/* Transiciones suaves para el cambio de tema */
* {
  transition-property: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
  transition-duration: 200ms;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

/* Personalización del scrollbar para modo oscuro */
.dark ::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

.dark ::-webkit-scrollbar-track {
  background: #374151;
}

.dark ::-webkit-scrollbar-thumb {
  background: #6b7280;
  border-radius: 4px;
}

.dark ::-webkit-scrollbar-thumb:hover {
  background: #9ca3af;
}
>>>> index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

>>>> logo.svg
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
>>>> pages/EventosDisponibles.jsx
import React, { useState, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { estudiante } from '../data/estudiante';

const EventosDisponibles = () => {
  const location = useLocation();
  const [activeTab, setActiveTab] = useState('todos');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [showRegisterModal, setShowRegisterModal] = useState(false);
  const [filters, setFilters] = useState({
    categoria: 'todas',
    fecha: '',
    horasMin: '',
    horasMax: ''
  });
  
  // Eventos disponibles (similar a los que se utilizan en EventsPreview.jsx)
  const eventos = [
    { 
      id: 1, 
      nombre: "IngeniOTIC 2025", 
      fecha: "2025-06-15",
      descripcion: "Evento de innovación tecnológica organizado por la facultad de Ingeniería. IngeniOTIC reúne a estudiantes, profesores y profesionales del sector para presentar proyectos y avances en Internet de las Cosas, Inteligencia Artificial y otras tecnologías emergentes.",
      imagen: "/assets/ingeniotic.jpg",
      horas: 8,
      lugar: "Auditorio Mayor",
      categoria: "Académico",
      organizador: "Facultad de Ingeniería",
      cupos: 150,
      cuposDisponibles: 87,
      requisitos: "Estudiantes de cualquier programa académico pueden participar.",
      contacto: "ingeniotic@unab.edu.co"
    },
    { 
      id: 2, 
      nombre: "UNAB Fest", 
      fecha: "2025-05-28",
      descripcion: "Festival cultural con actividades artísticas y musicales para toda la comunidad universitaria. UNAB Fest incluye presentaciones de bandas, grupos de danza, exposiciones de arte, talleres y muchas actividades para fomentar la integración y el bienestar estudiantil.",
      imagen: "/assets/unabfest.jpg",
      horas: 6,
      lugar: "Campus El Jardín",
      categoria: "Cultural",
      organizador: "Bienestar Universitario",
      cupos: 200,
      cuposDisponibles: 132,
      requisitos: "Abierto a toda la comunidad universitaria.",
      contacto: "bienestar@unab.edu.co"
    },
    { 
      id: 3, 
      nombre: "Semana de Ingeniería", 
      fecha: "2025-07-10",
      descripcion: "Conferencias, talleres y competencias organizadas por la facultad de Ingeniería. Durante una semana completa, los estudiantes podrán participar en actividades académicas, conocer los últimos avances tecnológicos y networking con empresas del sector.",
      imagen: "/assets/semana-ingenieria.jpg",
      horas: 10,
      lugar: "Bloque D",
      categoria: "Académico",
      organizador: "Facultad de Ingeniería",
      cupos: 180,
      cuposDisponibles: 180,
      requisitos: "Prioridad para estudiantes de Ingeniería, pero abierto a todos los programas.",
      contacto: "ingenieria@unab.edu.co"
    },
    { 
      id: 4, 
      nombre: "ULIBRO 2025", 
      fecha: "2025-08-20",
      descripcion: "Feria del libro con presentaciones de autores nacionales e internacionales. ULIBRO es el evento cultural más importante de la región, con charlas, talleres literarios, presentaciones de libros, firmas con autores y actividades para todas las edades.",
      imagen: "/assets/ulibro.jpg",
      horas: 5,
      lugar: "Centro de Convenciones Neomundo",
      categoria: "Cultural",
      organizador: "Departamento de Humanidades",
      cupos: 300,
      cuposDisponibles: 245,
      requisitos: "Abierto a toda la comunidad universitaria y público en general.",
      contacto: "ulibro@unab.edu.co"
    },
    {
      id: 5,
      nombre: "Voluntariado Comunitario",
      fecha: "2025-06-05",
      descripcion: "Programa de voluntariado en comunidades vulnerables de la región. Los estudiantes podrán participar en proyectos de impacto social, aportando sus conocimientos y habilidades para ayudar a comunidades necesitadas.",
      imagen: "voluntariado.jpg",
      horas: 20,
      lugar: "Varios lugares",
      categoria: "Social",
      organizador: "Proyección Social UNAB",
      cupos: 50,
      cuposDisponibles: 32,
      requisitos: "Requiere compromiso de asistencia a todas las jornadas programadas.",
      contacto: "voluntariado@unab.edu.co"
    },
    {
      id: 6,
      nombre: "Congreso Internacional de Ciencias de la Salud",
      fecha: "2025-09-12",
      descripcion: "Congreso académico con ponentes internacionales sobre avances en medicina, enfermería y salud pública. Una oportunidad única para actualizar conocimientos y establecer contactos con profesionales del sector.",
      imagen: "congreso-salud.jpg",
      horas: 15,
      lugar: "Auditorio Menor",
      categoria: "Académico",
      organizador: "Facultad de Ciencias de la Salud",
      cupos: 120,
      cuposDisponibles: 120,
      requisitos: "Prioridad para estudiantes de Ciencias de la Salud, pero abierto a todos los programas.",
      contacto: "congresosalud@unab.edu.co"
    },
    {
      id: 7,
      nombre: "Torneo Deportivo Interfacultades",
      fecha: "2025-06-20",
      descripcion: "Competencias deportivas entre las diferentes facultades de la universidad. Las disciplinas incluyen fútbol, baloncesto, voleibol, ajedrez y atletismo. Es una excelente oportunidad para promover el deporte y la integración entre estudiantes.",
      imagen: "torneo-deportivo.jpg",
      horas: 12,
      lugar: "Coliseo y Canchas Deportivas",
      categoria: "Deportivo",
      organizador: "Bienestar Universitario - Área de Deportes",
      cupos: 200,
      cuposDisponibles: 157,
      requisitos: "Cada facultad debe inscribir sus equipos. También se puede participar como asistente.",
      contacto: "deportes@unab.edu.co"
    },
    {
      id: 8,
      nombre: "Seminario de Emprendimiento e Innovación",
      fecha: "2025-07-25",
      descripcion: "Seminario sobre herramientas y estrategias para emprendedores. Incluye talleres prácticos, charlas de emprendedores exitosos y asesorías para proyectos de emprendimiento de los estudiantes.",
      imagen: "seminario-emprendimiento.jpg",
      horas: 8,
      lugar: "Centro de Innovación UNAB",
      categoria: "Académico",
      organizador: "UNAB Creative",
      cupos: 80,
      cuposDisponibles: 65,
      requisitos: "Abierto a estudiantes de todos los programas académicos.",
      contacto: "emprendimiento@unab.edu.co"
    }
  ];

  // Eventos ya registrados por el estudiante (desde data/estudiante.js)
  const eventosRegistrados = estudiante.eventosRegistrados || [];
  const eventosRegistradosIds = eventosRegistrados.map(e => e.id);
  
  // Comprobar si hay un ID de evento en los parámetros de la URL
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const eventId = searchParams.get('id');
    const register = searchParams.get('register');
    
    if (eventId) {
      const evento = eventos.find(e => e.id === parseInt(eventId));
      if (evento) {
        setSelectedEvent(evento);
        if (register === 'true') {
          setShowRegisterModal(true);
        }
      }
    }
  }, [location]);

  // Formatear fecha para mostrar
  const formatDate = (dateString) => {
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('es-ES', options);
  };

  // Filtrar eventos según criterios
  const filteredEventos = eventos.filter(evento => {
    const matchesSearch = evento.nombre.toLowerCase().includes(searchTerm.toLowerCase()) || 
                         evento.descripcion.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesCategory = filters.categoria === 'todas' || evento.categoria === filters.categoria;
    
    const matchesDate = !filters.fecha || evento.fecha >= filters.fecha;
    
    const matchesHoursMin = !filters.horasMin || evento.horas >= parseInt(filters.horasMin);
    const matchesHoursMax = !filters.horasMax || evento.horas <= parseInt(filters.horasMax);
    
    return matchesSearch && matchesCategory && matchesDate && matchesHoursMin && matchesHoursMax;
  });

  // Agrupar eventos por categoría
  const categorias = [...new Set(eventos.map(evento => evento.categoria))];
  
  // Eventos según la tab activa
  const currentEvents = activeTab === 'todos' 
    ? filteredEventos 
    : filteredEventos.filter(evento => evento.categoria.toLowerCase() === activeTab.toLowerCase());

  // Manejar registro de evento (aquí se implementaría la lógica real)
  const handleRegister = (evento) => {
    // En una aplicación real, esto enviaría datos al servidor
    console.log(`Registrado para: ${evento.nombre}`);
    
    // Cerrar el modal después del registro
    setShowRegisterModal(false);
    setSelectedEvent(null);
    
    // Redirigir a la página de EventosRegistrados
    // En una app real usaríamos history.push o navegación programática
    alert(`¡Te has registrado exitosamente en el evento "${evento.nombre}"!`);
  };

  return (
    <div className="flex flex-col min-h-screen">
      {/* Hero Section - Versión reducida para la página de eventos */}
      <div className="bg-green-700 text-white py-10">
        <div className="container mx-auto px-4">
          <h1 className="text-3xl font-bold mb-2">Eventos Disponibles</h1>
          <p className="opacity-90">
            Explora y regístrate en eventos para acumular horas libres
          </p>
        </div>
      </div>
      
      {/* Main Content */}
      <div className="flex-grow bg-gray-50 py-8">
        <div className="container mx-auto px-4">
          
          {/* Buscador y filtros */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6">
              <div className="md:w-1/2">
                <h2 className="text-xl font-bold text-gray-800 mb-2">Buscar Eventos</h2>
                <div className="relative">
                  <input 
                    type="text" 
                    placeholder="Buscar por nombre o descripción..." 
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                  <svg className="absolute left-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                </div>
              </div>
              
              <div className="md:w-1/2 md:text-right">
                <Link 
                  to="/eventos-registrados" 
                  className="inline-block bg-green-700 hover:bg-green-800 text-white font-medium py-2 px-4 rounded transition duration-300"
                >
                  Ver Mis Eventos Registrados
                </Link>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div>
                <label htmlFor="categoria" className="block text-sm font-medium text-gray-700 mb-1">Categoría</label>
                <select 
                  id="categoria" 
                  className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-green-500 focus:border-green-500 sm:text-sm rounded-md"
                  value={filters.categoria}
                  onChange={(e) => setFilters({...filters, categoria: e.target.value})}
                >
                  <option value="todas">Todas las categorías</option>
                  {categorias.map((cat, idx) => (
                    <option key={idx} value={cat}>{cat}</option>
                  ))}
                </select>
              </div>
              
              <div>
                <label htmlFor="fecha" className="block text-sm font-medium text-gray-700 mb-1">Fecha desde</label>
                <input 
                  type="date" 
                  id="fecha" 
                  className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-green-500 focus:border-green-500 sm:text-sm rounded-md"
                  value={filters.fecha}
                  onChange={(e) => setFilters({...filters, fecha: e.target.value})}
                />
              </div>
              
              <div>
                <label htmlFor="horasMin" className="block text-sm font-medium text-gray-700 mb-1">Horas mínimas</label>
                <input 
                  type="number" 
                  id="horasMin" 
                  min="0" 
                  placeholder="Min. horas"
                  className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-green-500 focus:border-green-500 sm:text-sm rounded-md"
                  value={filters.horasMin}
                  onChange={(e) => setFilters({...filters, horasMin: e.target.value})}
                />
              </div>
              
              <div>
                <label htmlFor="horasMax" className="block text-sm font-medium text-gray-700 mb-1">Horas máximas</label>
                <input 
                  type="number" 
                  id="horasMax" 
                  min="0"
                  placeholder="Max. horas"
                  className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-green-500 focus:border-green-500 sm:text-sm rounded-md"
                  value={filters.horasMax}
                  onChange={(e) => setFilters({...filters, horasMax: e.target.value})}
                />
              </div>
            </div>
          </div>
          
          {/* Tabs de categorías */}
          <div className="bg-white rounded-lg shadow-md mb-8">
            <div className="border-b border-gray-200 px-6">
              <nav className="flex space-x-8 overflow-x-auto">
                <button
                  onClick={() => setActiveTab('todos')} 
                  className={`py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${
                    activeTab === 'todos' 
                      ? 'border-green-700 text-green-700' 
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  Todos los eventos
                </button>
                
                {categorias.map((categoria, index) => (
                  <button
                    key={index}
                    onClick={() => setActiveTab(categoria.toLowerCase())} 
                    className={`py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${
                      activeTab === categoria.toLowerCase() 
                        ? 'border-green-700 text-green-700' 
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                  >
                    {categoria}
                  </button>
                ))}
              </nav>
            </div>
            
            {/* Listado de eventos */}
            <div className="p-6">
              {currentEvents.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {currentEvents.map((evento) => {
                    const isRegistered = eventosRegistradosIds.includes(evento.id);
                    return (
                      <div key={evento.id} className="border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow">
                        <div className="h-48 bg-gray-200 relative overflow-hidden">
                          {/* Aquí iría la imagen real del evento */}
                          <div className={`w-full h-full flex items-center justify-center ${evento.id % 3 === 0 ? 'bg-blue-100' : evento.id % 3 === 1 ? 'bg-green-100' : 'bg-purple-100'}`}>
                            <svg className="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                            </svg>
                          </div>
                          
                          {/* Badge de categoría */}
                          <span className={`absolute top-4 right-4 px-2 py-1 rounded-full text-xs font-medium ${
                            evento.categoria === 'Académico' ? 'bg-blue-100 text-blue-800' :
                            evento.categoria === 'Cultural' ? 'bg-purple-100 text-purple-800' :
                            evento.categoria === 'Deportivo' ? 'bg-red-100 text-red-800' :
                            'bg-green-100 text-green-800'
                          }`}>
                            {evento.categoria}
                          </span>
                        </div>
                        
                        <div className="p-4">
                          <div className="flex justify-between items-start">
                            <h3 className="font-semibold text-lg text-gray-800 mb-2">{evento.nombre}</h3>
                            <span className="bg-green-100 text-green-800 text-xs font-medium py-1 px-2 rounded">
                              {evento.horas} horas
                            </span>
                          </div>
                          
                          <div className="flex items-center text-sm text-gray-600 mb-2">
                            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            {formatDate(evento.fecha)}
                          </div>
                          
                          <div className="flex items-center text-sm text-gray-600 mb-3">
                            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                            </svg>
                            {evento.lugar}
                          </div>
                          
                          <p className="text-sm text-gray-600 mb-4 line-clamp-3">
                            {evento.descripcion}
                          </p>
                          
                          <div className="flex justify-between items-center">
                            <button 
                              onClick={() => {
                                setSelectedEvent(evento);
                                setShowRegisterModal(false);
                              }}
                              className="text-green-700 hover:text-green-800 text-sm font-medium inline-flex items-center"
                            >
                              Más información
                              <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                              </svg>
                            </button>
                            
                            {isRegistered ? (
                              <Link
                                to="/eventos-registrados"
                                className="text-white bg-gray-500 text-sm font-medium py-1 px-3 rounded transition duration-300 cursor-not-allowed"
                              >
                                Ya inscrito
                              </Link>
                            ) : (
                              <button 
                                onClick={() => {
                                  setSelectedEvent(evento);
                                  setShowRegisterModal(true);
                                }}
                                className="text-white bg-green-700 hover:bg-green-800 text-sm font-medium py-1 px-3 rounded transition duration-300"
                              >
                                Inscribirme
                              </button>
                            )}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              ) : (
                <div className="text-center py-8">
                  <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
                  </svg>
                  <h3 className="mt-2 text-sm font-medium text-gray-900">No hay eventos disponibles</h3>
                  <p className="mt-1 text-sm text-gray-500">
                    No hemos encontrado eventos que coincidan con tus criterios de búsqueda.
                  </p>
                  <div className="mt-6">
                    <button 
                      onClick={() => {
                        setSearchTerm('');
                        setFilters({
                          categoria: 'todas',
                          fecha: '',
                          horasMin: '',
                          horasMax: ''
                        });
                        setActiveTab('todos');
                      }}
                      className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-700 hover:bg-green-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                    >
                      Limpiar filtros
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
          
          {/* Acciones adicionales */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <h3 className="text-xl font-bold text-gray-800 mb-4">¿Organizas un evento?</h3>
            <p className="text-gray-600 mb-4">
              Si eres organizador de eventos o representante estudiantil, puedes solicitar la aprobación de horas libres para tu evento.
            </p>
            <div className="flex flex-col sm:flex-row gap-4">
              <Link 
                to="/solicitar-evento" 
                className="inline-block text-center bg-green-700 hover:bg-green-800 text-white font-medium py-2 px-4 rounded transition duration-300"
              >
                Solicitar aprobación de evento
              </Link>
              <a 
                href="#" 
                className="inline-block text-center border border-gray-300 hover:bg-gray-100 text-gray-700 font-medium py-2 px-4 rounded transition duration-300"
              >
                Consultar requisitos
              </a>
            </div>
          </div>
          
          {/* Enlaces Rápidos */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <h3 className="text-xl font-bold text-gray-800 mb-4">Accesos Rápidos</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <Link 
                to="/horas-libres"
                className="bg-green-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-green-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <h4 className="font-semibold text-center">Horas Libres</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Ver mi progreso</p>
              </Link>
              
              <Link 
                to="/eventos-registrados"
                className="bg-blue-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-blue-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
                </svg>
                <h4 className="font-semibold text-center">Mis Eventos</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Ver eventos registrados</p>
              </Link>
              
              <Link 
                to="/perfil"
                className="bg-purple-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-purple-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
                <h4 className="font-semibold text-center">Mi Perfil</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Ver mi información</p>
              </Link>
              
              <Link 
                to="/"
                className="bg-yellow-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-yellow-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                </svg>
                <h4 className="font-semibold text-center">Inicio</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Volver a inicio</p>
              </Link>
            </div>
          </div>
        </div>
      </div>
      
      {/* Modal de detalles del evento */}
      {selectedEvent && !showRegisterModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-start">
                <h2 className="text-2xl font-bold text-gray-800">{selectedEvent.nombre}</h2>
                <button 
                  onClick={() => setSelectedEvent(null)}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>
              
              <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="md:col-span-2">
                  <div className="h-64 bg-gray-200 rounded-lg mb-4">
                    {/* Aquí iría la imagen real del evento */}
                    <div className={`w-full h-full flex items-center justify-center rounded-lg ${selectedEvent.id % 3 === 0 ? 'bg-blue-100' : selectedEvent.id % 3 === 1 ? 'bg-green-100' : 'bg-purple-100'}`}>
                      <svg className="w-20 h-20 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                      </svg>
                    </div>
                  </div>
                  
                  <h3 className="text-lg font-semibold text-gray-800 mb-2">Descripción</h3>
                  <p className="text-gray-600 mb-6">{selectedEvent.descripcion}</p>
                  
                  <h3 className="text-lg font-semibold text-gray-800 mb-2">Requisitos</h3>
                  <p className="text-gray-600 mb-6">{selectedEvent.requisitos}</p>
                  
                  <div className="flex justify-end">
                    {eventosRegistradosIds.includes(selectedEvent.id) ? (
                      <Link
                        to="/eventos-registrados"
                        className="inline-block text-white bg-gray-500 font-medium py-2 px-4 rounded transition duration-300 cursor-not-allowed mr-4"
                      >
                        Ya inscrito
                      </Link>
                    ) : (
                      <button 
                        onClick={() => setShowRegisterModal(true)}
                        className="inline-block text-white bg-green-700 hover:bg-green-800 font-medium py-2 px-4 rounded transition duration-300"
                      >
                        Inscribirme
                      </button>
                    )}
                  </div>
                </div>
                
                <div className="bg-gray-50 rounded-lg p-4">
                  <h3 className="text-lg font-semibold text-gray-800 mb-4">Información del Evento</h3>
                  
                  <dl className="space-y-3">
                    <div>
                      <dt className="text-sm font-medium text-gray-500">Categoría</dt>
                      <dd className="mt-1 text-sm text-gray-900">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                          selectedEvent.categoria === 'Académico' ? 'bg-blue-100 text-blue-800' :
                          selectedEvent.categoria === 'Cultural' ? 'bg-purple-100 text-purple-800' :
                          selectedEvent.categoria === 'Deportivo' ? 'bg-red-100 text-red-800' :
                          'bg-green-100 text-green-800'
                        }`}>
                          {selectedEvent.categoria}
                        </span>
                      </dd>
                    </div>
                    
                    <div>
                      <dt className="text-sm font-medium text-gray-500">Fecha</dt>
                      <dd className="mt-1 text-sm text-gray-900">{formatDate(selectedEvent.fecha)}</dd>
                    </div>
                    
                    <div>
                      <dt className="text-sm font-medium text-gray-500">Lugar</dt>
                      <dd className="mt-1 text-sm text-gray-900">{selectedEvent.lugar}</dd>
                    </div>
                    
                    <div>
                      <dt className="text-sm font-medium text-gray-500">Horas acreditables</dt>
                      <dd className="mt-1 text-sm text-gray-900">{selectedEvent.horas} horas</dd>
                    </div>
                    
                    <div>
                      <dt className="text-sm font-medium text-gray-500">Organizador</dt>
                      <dd className="mt-1 text-sm text-gray-900">{selectedEvent.organizador}</dd>
                    </div>
                    
                    <div>
                      <dt className="text-sm font-medium text-gray-500">Cupos disponibles</dt>
                      <dd className="mt-1 text-sm text-gray-900">{selectedEvent.cuposDisponibles} de {selectedEvent.cupos}</dd>
                    </div>
                    
                    <div>
                      <dt className="text-sm font-medium text-gray-500">Contacto</dt>
                      <dd className="mt-1 text-sm text-gray-900">{selectedEvent.contacto}</dd>
                    </div>
                  </dl>
                  
                  <div className="mt-6">
                    <div className="w-full bg-gray-200 rounded-full h-2.5 mb-2">
                      <div 
                        className="bg-green-600 h-2.5 rounded-full" 
                        style={{ width: `${Math.round((selectedEvent.cuposDisponibles / selectedEvent.cupos) * 100)}%` }}
                      ></div>
                    </div>
                    <p className="text-xs text-gray-500 text-right">
                      {Math.round((selectedEvent.cuposDisponibles / selectedEvent.cupos) * 100)}% de cupos disponibles
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Modal de registro para el evento */}
      {selectedEvent && showRegisterModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-xl max-w-lg w-full">
            <div className="p-6">
              <div className="flex justify-between items-start mb-4">
                <h2 className="text-xl font-bold text-gray-800">Inscripción al Evento</h2>
                <button 
                  onClick={() => setShowRegisterModal(false)}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>
              
              <div className="mb-6">
                <h3 className="font-medium text-gray-800 mb-2">{selectedEvent.nombre}</h3>
                <div className="flex items-center text-sm text-gray-600 mb-2">
                  <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  {formatDate(selectedEvent.fecha)}
                </div>
                <div className="flex items-center text-sm text-gray-600 mb-4">
                  <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  </svg>
                  {selectedEvent.lugar}
                </div>
                
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
                  <div className="flex items-start">
                    <div className="flex-shrink-0">
                      <svg className="h-5 w-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <h4 className="text-sm leading-5 font-medium text-yellow-800">Importante</h4>
                      <div className="mt-1 text-sm leading-5 text-yellow-700">
                        <p>
                          Al registrarte en este evento, te comprometes a asistir. Si no puedes asistir, por favor cancela tu inscripción con al menos 24 horas de anticipación.
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
                
                <form>
                  <div className="mb-4">
                    <label htmlFor="terminos" className="flex items-start">
                      <input
                        id="terminos"
                        name="terminos"
                        type="checkbox"
                        className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded mt-1"
                      />
                      <span className="ml-2 text-sm text-gray-600">
                        Acepto los términos y condiciones de participación en el evento y me comprometo a asistir. Entiendo que mi asistencia será verificada para la acreditación de horas libres.
                      </span>
                    </label>
                  </div>
                  
                  <div className="mb-4">
                    <label htmlFor="comentarios" className="block text-sm font-medium text-gray-700 mb-1">
                      Comentarios o necesidades especiales (opcional)
                    </label>
                    <textarea
                      id="comentarios"
                      name="comentarios"
                      rows="3"
                      className="shadow-sm focus:ring-green-500 focus:border-green-500 block w-full sm:text-sm border-gray-300 rounded-md"
                      placeholder="Indícanos si tienes alguna necesidad especial o comentario para los organizadores."
                    ></textarea>
                  </div>
                </form>
              </div>
              
              <div className="flex justify-end space-x-4">
                <button 
                  onClick={() => setShowRegisterModal(false)}
                  className="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                >
                  Cancelar
                </button>
                <button 
                  onClick={() => handleRegister(selectedEvent)}
                  className="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-700 hover:bg-green-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                >
                  Confirmar Inscripción
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default EventosDisponibles;
>>>> pages/EventosRegistrados.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { estudiante } from '../data/estudiante';

const EventosRegistrados = () => {
  const [activeTab, setActiveTab] = useState('proximos');
  const [searchTerm, setSearchTerm] = useState('');
  const [showCancelModal, setShowCancelModal] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  
  // Eventos registrados por el estudiante (desde estudiante.js)
  const eventosRegistrados = estudiante.eventosRegistrados || [];
  
  // Eventos adicionales para mostrar más ejemplos
  const eventosCompletados = [
    { 
      id: 101, 
      nombre: "Taller de Innovación", 
      fecha: "2025-05-10",
      descripcion: "Participación en taller de innovación tecnológica donde se abordaron temas de metodologías ágiles y pensamiento de diseño para la resolución de problemas.",
      horas: 8,
      lugar: "Auditorio Menor",
      categoria: "Académico",
      estado: "Completado",
      asistencia: "Verificada",
      certificado: true
    }
  ];
  
  // Eventos ficticios para mostrar diferentes estados
  const todosEventos = [
    ...eventosRegistrados.map(ev => ({
      ...ev,
      descripcion: ev.id === 1 
        ? "Participación en taller de innovación tecnológica donde se abordaron temas de metodologías ágiles y pensamiento de diseño para la resolución de problemas." 
        : "Competencia de desarrollo de software con duración de 48 horas donde los participantes crean soluciones innovadoras a problemáticas reales.",
      lugar: ev.id === 1 ? "Auditorio Menor" : "Centro de Innovación UNAB",
      categoria: "Académico",
      estado: "Próximo",
      horas: ev.id === 1 ? 8 : 12,
      asistencia: "Pendiente",
      certificado: false
    })),
    ...eventosCompletados
  ];
  
  // Filtrar eventos según el término de búsqueda
  const filteredEventos = todosEventos.filter(evento => 
    evento.nombre.toLowerCase().includes(searchTerm.toLowerCase()) ||
    evento.descripcion.toLowerCase().includes(searchTerm.toLowerCase())
  );
  
  // Filtrar eventos según la tab activa
  const currentEvents = activeTab === 'todos' 
    ? filteredEventos 
    : activeTab === 'proximos' 
      ? filteredEventos.filter(evento => evento.estado === 'Próximo')
      : filteredEventos.filter(evento => evento.estado === 'Completado');
  
  // Formatear fecha para mostrar
  const formatDate = (dateString) => {
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('es-ES', options);
  };

  // Manejar cancelación de evento
  const handleCancelRegistration = () => {
    // En una aplicación real, esto enviaría datos al servidor
    console.log(`Cancelando registro para: ${selectedEvent.nombre}`);
    
    // Cerrar el modal después de la cancelación
    setShowCancelModal(false);
    setSelectedEvent(null);
    
    // Mostrar confirmación al usuario
    alert(`Has cancelado tu inscripción al evento "${selectedEvent.nombre}". En una aplicación real, esta información se enviaría al servidor.`);
  };

  // Manejar descarga de certificado
  const handleDownloadCertificate = (evento) => {
    // En una aplicación real, esto descargaría el certificado
    console.log(`Descargando certificado para: ${evento.nombre}`);
    alert(`Descargando certificado de "${evento.nombre}". En una aplicación real, esta acción descargaría el PDF del certificado.`);
  };

  return (
    <div className="flex flex-col min-h-screen">
      {/* Hero Section - Versión reducida para la página de eventos registrados */}
      <div className="bg-green-700 text-white py-10">
        <div className="container mx-auto px-4">
          <h1 className="text-3xl font-bold mb-2">Mis Eventos Registrados</h1>
          <p className="opacity-90">
            Gestiona tus inscripciones a eventos y descarga tus certificados
          </p>
        </div>
      </div>
      
      {/* Main Content */}
      <div className="flex-grow bg-gray-50 py-8">
        <div className="container mx-auto px-4">
          
          {/* Resumen de Eventos */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <div className="flex flex-col md:flex-row">
              <div className="md:w-3/4 pr-0 md:pr-8">
                <h2 className="text-xl font-bold text-gray-800 mb-4">Resumen de Eventos</h2>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                  <div className="bg-blue-100 text-blue-800 rounded-lg p-4">
                    <div className="flex items-center">
                      <div className="mr-4">
                        <svg className="w-10 h-10 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                        </svg>
                      </div>
                      <div>
                        <p className="text-sm font-medium">Eventos Registrados</p>
                        <p className="text-2xl font-bold">{eventosRegistrados.length}</p>
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-green-100 text-green-800 rounded-lg p-4">
                    <div className="flex items-center">
                      <div className="mr-4">
                        <svg className="w-10 h-10 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                      </div>
                      <div>
                        <p className="text-sm font-medium">Eventos Completados</p>
                        <p className="text-2xl font-bold">{eventosCompletados.length}</p>
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-yellow-100 text-yellow-800 rounded-lg p-4">
                    <div className="flex items-center">
                      <div className="mr-4">
                        <svg className="w-10 h-10 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                      </div>
                      <div>
                        <p className="text-sm font-medium">Horas Acumuladas</p>
                        <p className="text-2xl font-bold">{todosEventos.reduce((acc, evento) => acc + (evento.estado === 'Completado' ? evento.horas : 0), 0)}</p>
                      </div>
                    </div>
                  </div>
                </div>
                
                <div className="mb-4">
                  <p className="text-sm text-gray-600">
                    Recuerda que debes confirmar tu asistencia a los eventos para recibir tus horas libres. Si no puedes asistir a un evento, por favor cancela tu inscripción con al menos 24 horas de anticipación.
                  </p>
                </div>
              </div>
              
              <div className="md:w-1/4 mt-6 md:mt-0">
                <div className="bg-green-50 rounded-lg p-6 h-full">
                  <div className="flex items-center justify-center mb-4">
                    <div className="h-24 w-24 rounded-full bg-green-100 flex items-center justify-center">
                      <span className="text-3xl font-bold text-green-700">{estudiante.horasLibres}</span>
                    </div>
                  </div>
                  <div className="text-center">
                    <h3 className="text-lg font-semibold text-gray-800 mb-1">Horas Acumuladas</h3>
                    <p className="text-sm text-gray-600 mb-3">De 60 horas requeridas</p>
                    <Link 
                      to="/eventos-disponibles"
                      className="inline-block bg-green-700 hover:bg-green-800 text-white text-sm font-medium py-2 px-4 rounded transition duration-300 w-full"
                    >
                      Inscribirme a Eventos
                    </Link>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          {/* Buscador y filtros */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-4">
              <div className="md:w-1/2">
                <h2 className="text-xl font-bold text-gray-800 mb-2">Mis Eventos</h2>
                <div className="relative">
                  <input 
                    type="text" 
                    placeholder="Buscar en mis eventos..." 
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                  <svg className="absolute left-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                </div>
              </div>
              
              <div className="md:w-1/2 md:text-right">
                <Link 
                  to="/eventos-disponibles" 
                  className="inline-block bg-green-700 hover:bg-green-800 text-white font-medium py-2 px-4 rounded transition duration-300"
                >
                  Ver Eventos Disponibles
                </Link>
              </div>
            </div>
          </div>
          
          {/* Tabs de navegación */}
          <div className="bg-white rounded-lg shadow-md mb-8">
            <div className="border-b border-gray-200 px-6">
              <nav className="flex space-x-8 overflow-x-auto">
                <button
                  onClick={() => setActiveTab('proximos')} 
                  className={`py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${
                    activeTab === 'proximos' 
                      ? 'border-green-700 text-green-700' 
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  Próximos Eventos
                </button>
                
                <button
                  onClick={() => setActiveTab('completados')} 
                  className={`py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${
                    activeTab === 'completados' 
                      ? 'border-green-700 text-green-700' 
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  Eventos Completados
                </button>
                
                <button
                  onClick={() => setActiveTab('todos')} 
                  className={`py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${
                    activeTab === 'todos' 
                      ? 'border-green-700 text-green-700' 
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  Todos los Eventos
                </button>
              </nav>
            </div>
            
            {/* Listado de eventos */}
            <div className="p-6">
              {currentEvents.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {currentEvents.map((evento) => (
                    <div key={evento.id} className="border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow">
                      <div className="p-4">
                        <div className="flex justify-between items-start mb-2">
                          <h3 className="font-semibold text-lg text-gray-800">{evento.nombre}</h3>
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                            evento.estado === 'Completado' 
                              ? 'bg-green-100 text-green-800' 
                              : 'bg-blue-100 text-blue-800'
                          }`}>
                            {evento.estado}
                          </span>
                        </div>
                        
                        <div className="flex items-center text-sm text-gray-600 mb-2">
                          <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                          </svg>
                          {formatDate(evento.fecha)}
                        </div>
                        
                        <div className="flex items-center text-sm text-gray-600 mb-2">
                          <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                          </svg>
                          {evento.lugar}
                        </div>
                        
                        <div className="flex items-center text-sm text-gray-600 mb-3">
                          <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                          </svg>
                          {evento.horas} horas {evento.estado === 'Completado' ? 'acreditadas' : 'al completar'}
                        </div>
                        
                        <p className="text-sm text-gray-600 mb-4 line-clamp-2">
                          {evento.descripcion}
                        </p>
                        
                        <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-2">
                          <button 
                            onClick={() => {
                              setSelectedEvent(evento);
                              setShowDetailsModal(true);
                            }}
                            className="text-green-700 hover:text-green-800 text-sm font-medium inline-flex items-center"
                          >
                            Ver detalles
                            <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                            </svg>
                          </button>
                          
                          <div className="flex gap-2">
                            {evento.estado === 'Próximo' && (
                              <button 
                                onClick={() => {
                                  setSelectedEvent(evento);
                                  setShowCancelModal(true);
                                }}
                                className="text-red-700 hover:text-red-800 text-sm font-medium py-1 px-3 border border-red-300 rounded hover:bg-red-50 transition duration-300"
                              >
                                Cancelar
                              </button>
                            )}
                            
                            {evento.estado === 'Completado' && evento.certificado && (
                              <button 
                                onClick={() => handleDownloadCertificate(evento)}
                                className="text-white bg-green-700 hover:bg-green-800 text-sm font-medium py-1 px-3 rounded transition duration-300"
                              >
                                Certificado
                              </button>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
                  </svg>
                  <h3 className="mt-2 text-sm font-medium text-gray-900">No hay eventos en esta categoría</h3>
                  <p className="mt-1 text-sm text-gray-500">
                    {activeTab === 'proximos' 
                      ? 'No tienes eventos próximos registrados.' 
                      : activeTab === 'completados'
                        ? 'No has completado ningún evento todavía.'
                        : 'No tienes eventos registrados.'}
                  </p>
                  <div className="mt-6">
                    <Link 
                      to="/eventos-disponibles"
                      className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-700 hover:bg-green-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                    >
                      Ver eventos disponibles
                    </Link>
                  </div>
                </div>
              )}
            </div>
          </div>
          
          {/* Guía de certificaciones */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <h3 className="text-xl font-bold text-gray-800 mb-4">Guía para Certificación de Horas</h3>
            
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
              <div className="flex items-start">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3">
                  <h4 className="text-sm leading-5 font-medium text-blue-800">Información importante</h4>
                  <div className="mt-1 text-sm leading-5 text-blue-700">
                    <p>Para obtener la certificación de horas libres, debes asistir al evento completo y registrar tu asistencia al inicio y al final del mismo.</p>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="space-y-4">
              <div className="flex items-start">
                <div className="flex-shrink-0 h-8 w-8 rounded-full bg-green-100 flex items-center justify-center">
                  <span className="text-green-700 font-semibold">1</span>
                </div>
                <div className="ml-4">
                  <h4 className="text-md font-medium text-gray-800">Inscripción al Evento</h4>
                  <p className="mt-1 text-sm text-gray-600">Regístrate en los eventos a través del portal estudiantil. Recibirás una confirmación por correo electrónico.</p>
                </div>
              </div>
              
              <div className="flex items-start">
                <div className="flex-shrink-0 h-8 w-8 rounded-full bg-green-100 flex items-center justify-center">
                  <span className="text-green-700 font-semibold">2</span>
                </div>
                <div className="ml-4">
                  <h4 className="text-md font-medium text-gray-800">Asistencia al Evento</h4>
                  <p className="mt-1 text-sm text-gray-600">Asiste al evento y registra tu entrada y salida con el código QR o a través del personal encargado.</p>
                </div>
              </div>
              
              <div className="flex items-start">
                <div className="flex-shrink-0 h-8 w-8 rounded-full bg-green-100 flex items-center justify-center">
                  <span className="text-green-700 font-semibold">3</span>
                </div>
                <div className="ml-4">
                  <h4 className="text-md font-medium text-gray-800">Verificación</h4>
                  <p className="mt-1 text-sm text-gray-600">El organizador del evento verificará tu asistencia dentro de los 3 días hábiles siguientes al evento.</p>
                </div>
              </div>
              
              <div className="flex items-start">
                <div className="flex-shrink-0 h-8 w-8 rounded-full bg-green-100 flex items-center justify-center">
                  <span className="text-green-700 font-semibold">4</span>
                </div>
                <div className="ml-4">
                  <h4 className="text-md font-medium text-gray-800">Certificación</h4>
                  <p className="mt-1 text-sm text-gray-600">Una vez verificada tu asistencia, podrás descargar el certificado desde la sección "Eventos Completados".</p>
                </div>
              </div>
            </div>
          </div>
          
          {/* Enlaces Rápidos */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <h3 className="text-xl font-bold text-gray-800 mb-4">Accesos Rápidos</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <Link 
                to="/horas-libres"
                className="bg-green-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-green-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <h4 className="font-semibold text-center">Horas Libres</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Ver mi progreso</p>
              </Link>
              
              <Link 
                to="/eventos-disponibles"
                className="bg-blue-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-blue-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                <h4 className="font-semibold text-center">Eventos</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Ver eventos disponibles</p>
              </Link>
              
              <Link 
                to="/perfil"
                className="bg-purple-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-purple-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
                <h4 className="font-semibold text-center">Mi Perfil</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Ver mi información</p>
              </Link>
              
              <Link 
                to="/"
                className="bg-yellow-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-yellow-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                </svg>
                <h4 className="font-semibold text-center">Inicio</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Volver a inicio</p>
              </Link>
            </div>
          </div>
        </div>
      </div>
      
      {/* Modal de detalles del evento */}
      {selectedEvent && showDetailsModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-start">
                <h2 className="text-2xl font-bold text-gray-800">{selectedEvent.nombre}</h2>
                <button 
                  onClick={() => setShowDetailsModal(false)}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>
              
              <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="md:col-span-2">
                  <div className="h-48 bg-gray-200 rounded-lg mb-4">
                    {/* Aquí iría la imagen real del evento */}
                    <div className={`w-full h-full flex items-center justify-center rounded-lg ${selectedEvent.id % 3 === 0 ? 'bg-blue-100' : selectedEvent.id % 3 === 1 ? 'bg-green-100' : 'bg-purple-100'}`}>
                      <svg className="w-20 h-20 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                      </svg>
                    </div>
                  </div>
                  
                  <h3 className="text-lg font-semibold text-gray-800 mb-2">Descripción</h3>
                  <p className="text-gray-600 mb-6">{selectedEvent.descripcion}</p>
                  
                  {selectedEvent.estado === 'Próximo' && (
                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
                      <div className="flex items-start">
                        <div className="flex-shrink-0">
                          <svg className="h-5 w-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                          </svg>
                        </div>
                        <div className="ml-3">
                          <h4 className="text-sm leading-5 font-medium text-yellow-800">Recordatorio</h4>
                          <div className="mt-1 text-sm leading-5 text-yellow-700">
                            <p>
                              Recuerda llegar 15 minutos antes del inicio del evento para registrar tu asistencia. Si no puedes asistir, por favor cancela tu inscripción con al menos 24 horas de anticipación.
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {selectedEvent.estado === 'Completado' && (
                    <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
                      <div className="flex items-start">
                        <div className="flex-shrink-0">
                          <svg className="h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                          </svg>
                        </div>
                        <div className="ml-3">
                          <h4 className="text-sm leading-5 font-medium text-green-800">Evento Completado</h4>
                          <div className="mt-1 text-sm leading-5 text-green-700">
                            <p>
                              Has completado este evento con éxito. Las horas han sido acreditadas a tu cuenta.
                              {selectedEvent.certificado && ' Puedes descargar tu certificado desde esta página.'}
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  <div className="flex justify-end">
                    {selectedEvent.estado === 'Próximo' && (
                      <button 
                        onClick={() => {
                          setShowDetailsModal(false);
                          setShowCancelModal(true);
                        }}
                        className="inline-block text-white bg-red-600 hover:bg-red-700 font-medium py-2 px-4 rounded transition duration-300"
                      >
                        Cancelar Inscripción
                      </button>
                    )}
                    
                    {selectedEvent.estado === 'Completado' && selectedEvent.certificado && (
                      <button 
                        onClick={() => handleDownloadCertificate(selectedEvent)}
                        className="inline-block text-white bg-green-700 hover:bg-green-800 font-medium py-2 px-4 rounded transition duration-300"
                      >
                        Descargar Certificado
                      </button>
                    )}
                  </div>
                </div>
                
                <div className="bg-gray-50 rounded-lg p-4">
                  <h3 className="text-lg font-semibold text-gray-800 mb-4">Información del Evento</h3>
                  
                  <dl className="space-y-3">
                    <div>
                      <dt className="text-sm font-medium text-gray-500">Estado</dt>
                      <dd className="mt-1 text-sm text-gray-900">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                          selectedEvent.estado === 'Completado' 
                            ? 'bg-green-100 text-green-800' 
                            : 'bg-blue-100 text-blue-800'
                        }`}>
                          {selectedEvent.estado}
                        </span>
                      </dd>
                    </div>
                    
                    <div>
                      <dt className="text-sm font-medium text-gray-500">Categoría</dt>
                      <dd className="mt-1 text-sm text-gray-900">
                        <span className="px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          {selectedEvent.categoria}
                        </span>
                      </dd>
                    </div>
                    
                    <div>
                      <dt className="text-sm font-medium text-gray-500">Fecha</dt>
                      <dd className="mt-1 text-sm text-gray-900">{formatDate(selectedEvent.fecha)}</dd>
                    </div>
                    
                    <div>
                      <dt className="text-sm font-medium text-gray-500">Lugar</dt>
                      <dd className="mt-1 text-sm text-gray-900">{selectedEvent.lugar}</dd>
                    </div>
                    
                    <div>
                      <dt className="text-sm font-medium text-gray-500">Horas acreditables</dt>
                      <dd className="mt-1 text-sm text-gray-900">{selectedEvent.horas} horas</dd>
                    </div>
                    
                    {selectedEvent.estado === 'Completado' && (
                      <div>
                        <dt className="text-sm font-medium text-gray-500">Asistencia</dt>
                        <dd className="mt-1 text-sm text-gray-900">
                          <span className="px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            {selectedEvent.asistencia}
                          </span>
                        </dd>
                      </div>
                    )}
                  </dl>
                  
                  {selectedEvent.estado === 'Próximo' && (
                    <div className="mt-6 p-4 border border-gray-200 rounded-lg">
                      <h4 className="text-sm font-semibold text-gray-700 mb-2">Instrucciones:</h4>
                      <ul className="space-y-2 text-sm text-gray-600">
                        <li className="flex items-start">
                          <svg className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                          </svg>
                          <span>Llega 15 minutos antes para registrar tu entrada.</span>
                        </li>
                        <li className="flex items-start">
                          <svg className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                          </svg>
                          <span>Lleva tu carné estudiantil para la verificación.</span>
                        </li>
                        <li className="flex items-start">
                          <svg className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                          </svg>
                          <span>Registra tu salida al finalizar el evento.</span>
                        </li>
                      </ul>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Modal de cancelación de inscripción */}
      {selectedEvent && showCancelModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-xl max-w-lg w-full">
            <div className="p-6">
              <div className="flex justify-between items-start mb-4">
                <h2 className="text-xl font-bold text-gray-800">Cancelar Inscripción</h2>
                <button 
                  onClick={() => setShowCancelModal(false)}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>
              
              <div className="mb-6">
                <div className="flex items-center justify-center mb-4">
                  <div className="h-12 w-12 rounded-full bg-red-100 flex items-center justify-center">
                    <svg className="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                    </svg>
                  </div>
                </div>
                
                <h3 className="text-lg font-medium text-gray-900 text-center mb-2">
                  ¿Estás seguro de cancelar tu inscripción?
                </h3>
                
                <p className="text-sm text-gray-600 mb-4 text-center">
                  Estás a punto de cancelar tu inscripción a <span className="font-medium">{selectedEvent.nombre}</span>. Esta acción no se puede deshacer.
                </p>
                
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
                  <div className="flex items-start">
                    <div className="flex-shrink-0">
                      <svg className="h-5 w-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <p className="text-sm text-yellow-700">
                        Si cancelas tu inscripción a menos de 24 horas del evento, esto podría afectar tu prioridad en futuras inscripciones.
                      </p>
                    </div>
                  </div>
                </div>
                
                <form>
                  <div className="mb-4">
                    <label htmlFor="motivo" className="block text-sm font-medium text-gray-700 mb-1">
                      Motivo de la cancelación (opcional)
                    </label>
                    <select
                      id="motivo"
                      name="motivo"
                      className="shadow-sm focus:ring-green-500 focus:border-green-500 block w-full sm:text-sm border-gray-300 rounded-md"
                    >
                      <option value="">Selecciona un motivo</option>
                      <option value="horario">Conflicto de horario</option>
                      <option value="personal">Motivo personal</option>
                      <option value="otro">Otro</option>
                    </select>
                  </div>
                  
                  <div className="mb-4">
                    <label htmlFor="comentarios" className="block text-sm font-medium text-gray-700 mb-1">
                      Comentarios adicionales (opcional)
                    </label>
                    <textarea
                      id="comentarios"
                      name="comentarios"
                      rows="3"
                      className="shadow-sm focus:ring-green-500 focus:border-green-500 block w-full sm:text-sm border-gray-300 rounded-md"
                      placeholder="Si deseas, puedes proporcionar más detalles sobre tu cancelación."
                    ></textarea>
                  </div>
                </form>
              </div>
              
              <div className="flex justify-end space-x-4">
                <button 
                  onClick={() => setShowCancelModal(false)}
                  className="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                >
                  Volver
                </button>
                <button 
                  onClick={handleCancelRegistration}
                  className="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                >
                  Confirmar Cancelación
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default EventosRegistrados;
>>>> pages/FormularioUsuario.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';

const FormularioUsuario = () => {
  // Estado para los datos del formulario
  const [formData, setFormData] = useState({
    nombre: '',
    apellido: '',
    documento: '',
    tipoDocumento: 'cc',
    email: '',
    telefono: '',
    fechaNacimiento: '',
    programa: '',
    facultad: '',
    semestre: '',
    password: '',
    confirmPassword: '',
    aceptaTerminos: false
  });

  // Estado para manejar errores de validación
  const [errors, setErrors] = useState({});
  
  // Estado para mensaje de éxito
  const [successMessage, setSuccessMessage] = useState('');

  // Lista de facultades y programas disponibles
  const facultades = [
    { id: 1, nombre: 'Facultad de Ingeniería' },
    { id: 2, nombre: 'Facultad de Ciencias de la Salud' },
    { id: 3, nombre: 'Facultad de Ciencias Económicas, Administrativas y Contables' },
    { id: 4, nombre: 'Facultad de Ciencias Sociales, Humanidades y Artes' },
    { id: 5, nombre: 'Facultad de Ciencias Jurídicas y Políticas' }
  ];

  const programas = {
    1: ['Ingeniería de Sistemas', 'Ingeniería Industrial', 'Ingeniería Mecatrónica', 'Ingeniería Biomédica', 'Ingeniería en Energía'],
    2: ['Medicina', 'Enfermería', 'Psicología', 'Fisioterapia', 'Nutrición y Dietética'],
    3: ['Administración de Empresas', 'Contaduría Pública', 'Economía', 'Negocios Internacionales', 'Administración Turística y Hotelera'],
    4: ['Comunicación Social', 'Artes Audiovisuales', 'Literatura', 'Música', 'Gastronomía'],
    5: ['Derecho', 'Ciencia Política', 'Relaciones Internacionales']
  };

  // Manejar cambios en los campos del formulario
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData({
      ...formData,
      [name]: type === 'checkbox' ? checked : value
    });

    // Limpiar errores al cambiar el valor
    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: ''
      });
    }
  };

  // Manejar cambios en la facultad seleccionada
  const handleFacultadChange = (e) => {
    const facultadId = e.target.value;
    setFormData({
      ...formData,
      facultad: facultadId,
      programa: '' // Resetear el programa cuando cambia la facultad
    });
  };

  // Validar el formulario
  const validateForm = () => {
    let tempErrors = {};
    let formIsValid = true;

    // Validar nombre
    if (!formData.nombre.trim()) {
      tempErrors.nombre = 'El nombre es requerido';
      formIsValid = false;
    }

    // Validar apellido
    if (!formData.apellido.trim()) {
      tempErrors.apellido = 'El apellido es requerido';
      formIsValid = false;
    }

    // Validar documento
    if (!formData.documento.trim()) {
      tempErrors.documento = 'El documento es requerido';
      formIsValid = false;
    } else if (!/^\d+$/.test(formData.documento)) {
      tempErrors.documento = 'El documento debe contener solo números';
      formIsValid = false;
    }

    // Validar email
    if (!formData.email.trim()) {
      tempErrors.email = 'El email es requerido';
      formIsValid = false;
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      tempErrors.email = 'El email no es válido';
      formIsValid = false;
    }

    // Validar teléfono
    if (!formData.telefono.trim()) {
      tempErrors.telefono = 'El teléfono es requerido';
      formIsValid = false;
    } else if (!/^\d{10}$/.test(formData.telefono)) {
      tempErrors.telefono = 'El teléfono debe tener 10 dígitos';
      formIsValid = false;
    }

    // Validar fecha de nacimiento
    if (!formData.fechaNacimiento) {
      tempErrors.fechaNacimiento = 'La fecha de nacimiento es requerida';
      formIsValid = false;
    }

    // Validar facultad
    if (!formData.facultad) {
      tempErrors.facultad = 'Selecciona una facultad';
      formIsValid = false;
    }

    // Validar programa
    if (!formData.programa) {
      tempErrors.programa = 'Selecciona un programa';
      formIsValid = false;
    }

    // Validar semestre
    if (!formData.semestre) {
      tempErrors.semestre = 'Selecciona un semestre';
      formIsValid = false;
    }

    // Validar contraseña
    if (!formData.password) {
      tempErrors.password = 'La contraseña es requerida';
      formIsValid = false;
    } else if (formData.password.length < 8) {
      tempErrors.password = 'La contraseña debe tener al menos 8 caracteres';
      formIsValid = false;
    }

    // Validar confirmación de contraseña
    if (!formData.confirmPassword) {
      tempErrors.confirmPassword = 'Confirma tu contraseña';
      formIsValid = false;
    } else if (formData.password !== formData.confirmPassword) {
      tempErrors.confirmPassword = 'Las contraseñas no coinciden';
      formIsValid = false;
    }

    // Validar aceptación de términos
    if (!formData.aceptaTerminos) {
      tempErrors.aceptaTerminos = 'Debes aceptar los términos y condiciones';
      formIsValid = false;
    }

    setErrors(tempErrors);
    return formIsValid;
  };

  // Manejar envío del formulario
  const handleSubmit = (e) => {
    e.preventDefault();
    
    // Validar formulario
    if (validateForm()) {
      // Aquí iría la lógica para enviar los datos al servidor
      console.log('Datos del formulario:', formData);
      
      // Mostrar mensaje de éxito
      setSuccessMessage('¡Usuario creado exitosamente! Redirigiendo al inicio de sesión...');
      
      // Limpiar el formulario después del envío exitoso
      setFormData({
        nombre: '',
        apellido: '',
        documento: '',
        tipoDocumento: 'cc',
        email: '',
        telefono: '',
        fechaNacimiento: '',
        programa: '',
        facultad: '',
        semestre: '',
        password: '',
        confirmPassword: '',
        aceptaTerminos: false
      });
      
      // Redireccionar después de 3 segundos (simulado)
      setTimeout(() => {
        // En una aplicación real aquí se haría la redirección
        setSuccessMessage('');
      }, 3000);
    }
  };

  return (
    <div className="flex flex-col min-h-screen">
      {/* Hero Section - Versión reducida para formulario */}
      <div className="bg-green-700 text-white py-10">
        <div className="container mx-auto px-4">
          <h1 className="text-3xl font-bold mb-2">Crear Cuenta de Usuario</h1>
          <p className="opacity-90">
            Completa el formulario para registrarte en el Portal Estudiantil UNAB
          </p>
        </div>
      </div>
      
      {/* Main Content */}
      <div className="flex-grow bg-gray-50 py-8">
        <div className="container mx-auto px-4">
          
          {/* Formulario de Usuario */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            {successMessage ? (
              <div className="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-6" role="alert">
                <p>{successMessage}</p>
              </div>
            ) : (
              <form onSubmit={handleSubmit} className="space-y-6">
                <div className="bg-blue-50 border-l-4 border-blue-500 p-4 mb-6">
                  <div className="flex items-start">
                    <div className="flex-shrink-0">
                      <svg className="h-5 w-5 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <h3 className="text-sm leading-5 font-medium text-blue-800">Información importante</h3>
                      <div className="mt-2 text-sm leading-5 text-blue-700">
                        <p>
                          Completa todos los campos con información válida. Tu cuenta será verificada con el departamento de admisiones.
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
                
                <h3 className="text-lg font-semibold text-gray-800 mb-4">Información Personal</h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* Nombre */}
                  <div>
                    <label htmlFor="nombre" className="block text-sm font-medium text-gray-700 mb-1">Nombre(s) *</label>
                    <input
                      type="text"
                      id="nombre"
                      name="nombre"
                      value={formData.nombre}
                      onChange={handleChange}
                      className={`mt-1 block w-full border ${errors.nombre ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-green-500 focus:border-green-500'} rounded-md shadow-sm py-2 px-3 focus:outline-none sm:text-sm`}
                      placeholder="Ingresa tu nombre"
                    />
                    {errors.nombre && <p className="mt-1 text-sm text-red-600">{errors.nombre}</p>}
                  </div>
                  
                  {/* Apellido */}
                  <div>
                    <label htmlFor="apellido" className="block text-sm font-medium text-gray-700 mb-1">Apellido(s) *</label>
                    <input
                      type="text"
                      id="apellido"
                      name="apellido"
                      value={formData.apellido}
                      onChange={handleChange}
                      className={`mt-1 block w-full border ${errors.apellido ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-green-500 focus:border-green-500'} rounded-md shadow-sm py-2 px-3 focus:outline-none sm:text-sm`}
                      placeholder="Ingresa tu apellido"
                    />
                    {errors.apellido && <p className="mt-1 text-sm text-red-600">{errors.apellido}</p>}
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  {/* Tipo Documento */}
                  <div>
                    <label htmlFor="tipoDocumento" className="block text-sm font-medium text-gray-700 mb-1">Tipo de Documento *</label>
                    <select
                      id="tipoDocumento"
                      name="tipoDocumento"
                      value={formData.tipoDocumento}
                      onChange={handleChange}
                      className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-green-500 focus:border-green-500 sm:text-sm"
                    >
                      <option value="cc">Cédula de Ciudadanía</option>
                      <option value="ce">Cédula de Extranjería</option>
                      <option value="ti">Tarjeta de Identidad</option>
                      <option value="pp">Pasaporte</option>
                    </select>
                  </div>
                  
                  {/* Documento */}
                  <div className="md:col-span-2">
                    <label htmlFor="documento" className="block text-sm font-medium text-gray-700 mb-1">Número de Documento *</label>
                    <input
                      type="text"
                      id="documento"
                      name="documento"
                      value={formData.documento}
                      onChange={handleChange}
                      className={`mt-1 block w-full border ${errors.documento ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-green-500 focus:border-green-500'} rounded-md shadow-sm py-2 px-3 focus:outline-none sm:text-sm`}
                      placeholder="Ingresa tu número de documento"
                    />
                    {errors.documento && <p className="mt-1 text-sm text-red-600">{errors.documento}</p>}
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* Email */}
                  <div>
                    <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">Correo Electrónico *</label>
                    <input
                      type="email"
                      id="email"
                      name="email"
                      value={formData.email}
                      onChange={handleChange}
                      className={`mt-1 block w-full border ${errors.email ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-green-500 focus:border-green-500'} rounded-md shadow-sm py-2 px-3 focus:outline-none sm:text-sm`}
                      placeholder="ejemplo@unab.edu.co"
                    />
                    {errors.email && <p className="mt-1 text-sm text-red-600">{errors.email}</p>}
                  </div>
                  
                  {/* Teléfono */}
                  <div>
                    <label htmlFor="telefono" className="block text-sm font-medium text-gray-700 mb-1">Teléfono Celular *</label>
                    <input
                      type="tel"
                      id="telefono"
                      name="telefono"
                      value={formData.telefono}
                      onChange={handleChange}
                      className={`mt-1 block w-full border ${errors.telefono ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-green-500 focus:border-green-500'} rounded-md shadow-sm py-2 px-3 focus:outline-none sm:text-sm`}
                      placeholder="3XX-XXX-XXXX"
                    />
                    {errors.telefono && <p className="mt-1 text-sm text-red-600">{errors.telefono}</p>}
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  {/* Fecha de Nacimiento */}
                  <div>
                    <label htmlFor="fechaNacimiento" className="block text-sm font-medium text-gray-700 mb-1">Fecha de Nacimiento *</label>
                    <input
                      type="date"
                      id="fechaNacimiento"
                      name="fechaNacimiento"
                      value={formData.fechaNacimiento}
                      onChange={handleChange}
                      className={`mt-1 block w-full border ${errors.fechaNacimiento ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-green-500 focus:border-green-500'} rounded-md shadow-sm py-2 px-3 focus:outline-none sm:text-sm`}
                    />
                    {errors.fechaNacimiento && <p className="mt-1 text-sm text-red-600">{errors.fechaNacimiento}</p>}
                  </div>

                  {/* Facultad */}
                  <div>
                    <label htmlFor="facultad" className="block text-sm font-medium text-gray-700 mb-1">Facultad *</label>
                    <select
                      id="facultad"
                      name="facultad"
                      value={formData.facultad}
                      onChange={handleFacultadChange}
                      className={`mt-1 block w-full border ${errors.facultad ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-green-500 focus:border-green-500'} rounded-md shadow-sm py-2 px-3 focus:outline-none sm:text-sm`}
                    >
                      <option value="">Selecciona una facultad</option>
                      {facultades.map((facultad) => (
                        <option key={facultad.id} value={facultad.id}>{facultad.nombre}</option>
                      ))}
                    </select>
                    {errors.facultad && <p className="mt-1 text-sm text-red-600">{errors.facultad}</p>}
                  </div>
                  
                  {/* Programa */}
                  <div>
                    <label htmlFor="programa" className="block text-sm font-medium text-gray-700 mb-1">Programa Académico *</label>
                    <select
                      id="programa"
                      name="programa"
                      value={formData.programa}
                      onChange={handleChange}
                      className={`mt-1 block w-full border ${errors.programa ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-green-500 focus:border-green-500'} rounded-md shadow-sm py-2 px-3 focus:outline-none sm:text-sm`}
                      disabled={!formData.facultad}
                    >
                      <option value="">Selecciona un programa</option>
                      {formData.facultad && programas[formData.facultad].map((programa, index) => (
                        <option key={index} value={programa}>{programa}</option>
                      ))}
                    </select>
                    {errors.programa && <p className="mt-1 text-sm text-red-600">{errors.programa}</p>}
                  </div>
                </div>

                {/* Semestre */}
                <div>
                  <label htmlFor="semestre" className="block text-sm font-medium text-gray-700 mb-1">Semestre Actual *</label>
                  <select
                    id="semestre"
                    name="semestre"
                    value={formData.semestre}
                    onChange={handleChange}
                    className={`mt-1 block w-full md:w-1/4 border ${errors.semestre ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-green-500 focus:border-green-500'} rounded-md shadow-sm py-2 px-3 focus:outline-none sm:text-sm`}
                  >
                    <option value="">Selecciona un semestre</option>
                    {[...Array(10)].map((_, i) => (
                      <option key={i + 1} value={i + 1}>{i + 1}</option>
                    ))}
                  </select>
                  {errors.semestre && <p className="mt-1 text-sm text-red-600">{errors.semestre}</p>}
                </div>
                
                <h3 className="text-lg font-semibold text-gray-800 mb-4">Información de Acceso</h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* Contraseña */}
                  <div>
                    <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">Contraseña *</label>
                    <input
                      type="password"
                      id="password"
                      name="password"
                      value={formData.password}
                      onChange={handleChange}
                      className={`mt-1 block w-full border ${errors.password ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-green-500 focus:border-green-500'} rounded-md shadow-sm py-2 px-3 focus:outline-none sm:text-sm`}
                      placeholder="********"
                    />
                    {errors.password ? (
                      <p className="mt-1 text-sm text-red-600">{errors.password}</p>
                    ) : (
                      <p className="mt-1 text-xs text-gray-500">La contraseña debe tener al menos 8 caracteres</p>
                    )}
                  </div>
                  
                  {/* Confirmar Contraseña */}
                  <div>
                    <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-1">Confirmar Contraseña *</label>
                    <input
                      type="password"
                      id="confirmPassword"
                      name="confirmPassword"
                      value={formData.confirmPassword}
                      onChange={handleChange}
                      className={`mt-1 block w-full border ${errors.confirmPassword ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-green-500 focus:border-green-500'} rounded-md shadow-sm py-2 px-3 focus:outline-none sm:text-sm`}
                      placeholder="********"
                    />
                    {errors.confirmPassword && <p className="mt-1 text-sm text-red-600">{errors.confirmPassword}</p>}
                  </div>
                </div>
                
                {/* Términos y Condiciones */}
                <div className="mt-6">
                  <div className="flex items-start">
                    <div className="flex items-center h-5">
                      <input
                        id="aceptaTerminos"
                        name="aceptaTerminos"
                        type="checkbox"
                        checked={formData.aceptaTerminos}
                        onChange={handleChange}
                        className={`focus:ring-green-500 h-4 w-4 text-green-600 border ${errors.aceptaTerminos ? 'border-red-300' : 'border-gray-300'} rounded`}
                      />
                    </div>
                    <div className="ml-3 text-sm">
                      <label htmlFor="aceptaTerminos" className="font-medium text-gray-700">
                        Acepto los <a href="#" className="text-green-700 hover:text-green-600">términos y condiciones</a> y la <a href="#" className="text-green-700 hover:text-green-600">política de privacidad</a> *
                      </label>
                      {errors.aceptaTerminos && <p className="mt-1 text-sm text-red-600">{errors.aceptaTerminos}</p>}
                    </div>
                  </div>
                </div>
                
                <div className="flex flex-col md:flex-row justify-between md:items-center pt-6 border-t border-gray-200">
                  <div className="text-sm mb-4 md:mb-0">
                    <p>¿Ya tienes una cuenta? <Link to="/login" className="text-green-700 hover:text-green-600 font-medium">Inicia sesión aquí</Link></p>
                  </div>
                  
                  <div className="flex flex-col md:flex-row gap-4">
                    <Link to="/" className="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 text-center">
                      Cancelar
                    </Link>
                    <button
                      type="submit"
                      className="py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-700 hover:bg-green-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                    >
                      Crear Cuenta
                    </button>
                  </div>
                </div>
              </form>
            )}
          </div>
          
          {/* Información Adicional */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">Información Importante</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-medium text-gray-800 mb-2">Proceso de Verificación</h4>
                <p className="text-sm text-gray-600">
                  Una vez registrado, tu cuenta será verificada por el departamento de admisiones. 
                  Este proceso puede tomar hasta 24 horas hábiles. Recibirás un correo electrónico 
                  cuando tu cuenta esté activada.
                </p>
              </div>
              
              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-medium text-gray-800 mb-2">Soporte Técnico</h4>
                <p className="text-sm text-gray-600">
                  Si tienes problemas durante el registro o necesitas asistencia, 
                  puedes contactar al equipo de soporte técnico en:
                </p>
                <ul className="mt-2 space-y-1 text-sm text-gray-600">
                  <li className="flex items-center">
                    <svg className="h-4 w-4 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                    </svg>
                    soporte@unab.edu.co
                  </li>
                  <li className="flex items-center">
                    <svg className="h-4 w-4 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                    </svg>
                    (607) 6436111 Ext. 249
                  </li>
                </ul>
              </div>
            </div>
          </div>
          
          {/* Acción Rápida */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <div className="flex flex-col md:flex-row items-center justify-between">
              <div className="mb-4 md:mb-0">
                <h3 className="text-lg font-semibold text-gray-800">¿Tienes problemas para registrarte?</h3>
                <p className="text-gray-600">Contacta con admisiones para obtener ayuda personalizada</p>
              </div>
              <a
                href="mailto:admisiones@unab.edu.co"
                className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-700 hover:bg-green-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
              >
                Contactar Admisiones
                <svg className="ml-2 -mr-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                </svg>
              </a>
            </div>
          </div>
          
          {/* Enlaces Rápidos */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <h3 className="text-xl font-bold text-gray-800 mb-4">Accesos Rápidos</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <Link 
                to="/"
                className="bg-yellow-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-yellow-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                </svg>
                <h4 className="font-semibold text-center">Inicio</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Volver a inicio</p>
              </Link>
              
              <a 
                href="https://cosmos.unab.edu.co" 
                target="_blank" 
                rel="noopener noreferrer"
                className="bg-purple-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-purple-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                </svg>
                <h4 className="font-semibold text-center">Portal de Notas</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Consulta tus calificaciones</p>
              </a>
              
              <a 
                href="https://aulavirtual.unab.edu.co" 
                target="_blank" 
                rel="noopener noreferrer"
                className="bg-blue-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-blue-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path d="M12 14l9-5-9-5-9 5 9 5z"></path>
                  <path d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z"></path>
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222"></path>
                </svg>
                <h4 className="font-semibold text-center">Aula Virtual</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Accede a tus materias</p>
              </a>
              
              <Link 
                to="/eventos-disponibles"
                className="bg-green-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-green-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                <h4 className="font-semibold text-center">Eventos</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Eventos disponibles</p>
              </Link>
            </div>
          </div>
          
          {/* FAQ */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <h3 className="text-xl font-bold text-gray-800 mb-4">Preguntas Frecuentes</h3>
            
            <div className="space-y-4">
              <div className="bg-gray-50 rounded-lg p-4">
                <h4 className="font-medium text-gray-800 mb-2">¿Cuánto tiempo toma la verificación de mi cuenta?</h4>
                <p className="text-sm text-gray-600">
                  El proceso de verificación puede tomar hasta 24 horas hábiles. Recibirás un correo electrónico 
                  una vez que tu cuenta esté activada.
                </p>
              </div>
              
              <div className="bg-gray-50 rounded-lg p-4">
                <h4 className="font-medium text-gray-800 mb-2">¿Qué hago si olvidé mi contraseña?</h4>
                <p className="text-sm text-gray-600">
                  En la página de inicio de sesión encontrarás la opción "¿Olvidaste tu contraseña?". 
                  Sigue las instrucciones para restablecerla a través de tu correo electrónico.
                </p>
              </div>
              
              <div className="bg-gray-50 rounded-lg p-4">
                <h4 className="font-medium text-gray-800 mb-2">¿Puedo cambiar mi información personal después?</h4>
                <p className="text-sm text-gray-600">
                  Sí, una vez que tu cuenta esté activada, podrás actualizar cierta información personal desde la 
                  sección "Mi Perfil". Sin embargo, para cambios en tu programa académico o documento de identidad, 
                  deberás contactar directamente con admisiones.
                </p>
              </div>
              
              <div className="bg-gray-50 rounded-lg p-4">
                <h4 className="font-medium text-gray-800 mb-2">¿Es obligatorio registrarme en el portal estudiantil?</h4>
                <p className="text-sm text-gray-600">
                  Sí, el portal estudiantil es la plataforma oficial para gestionar tus actividades académicas, 
                  eventos y horas libres. Es un requisito para todos los estudiantes de la UNAB.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FormularioUsuario;
>>>> pages/HorasLibres.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { estudiante } from '../data/estudiante';

const HorasLibres = () => {
  const [activeTab, setActiveTab] = useState('resumen');
  
  // Información del estudiante
  const {horasLibres, eventosRegistrados } = estudiante;
  const horasRequeridas = 60; // Total de horas requeridas
  const horasFaltantes = Math.max(0, horasRequeridas - horasLibres);
  const porcentajeCompletado = Math.min(100, (horasLibres / horasRequeridas) * 100);
  
  // Historial de eventos y certificados con horas
  const historialEventos = [
    {
      id: 1,
      nombre: "Taller de Innovación",
      fecha: "2025-05-10",
      horas: 8,
      tipo: "Evento",
      descripcion: "Participación en taller de innovación tecnológica",
      estado: "Verificado"
    },
    {
      id: 2,
      nombre: "Hackathon UNAB",
      fecha: "2025-06-01",
      horas: 12,
      tipo: "Evento",
      descripcion: "Participación en hackathon de desarrollo de software",
      estado: "Pendiente"
    },
    {
      id: 3,
      nombre: "Voluntariado Biblioteca",
      fecha: "2025-04-20",
      horas: 15,
      tipo: "Voluntariado",
      descripcion: "Apoyo en catalogación de libros y atención al público",
      estado: "Verificado"
    }
  ];
  
  // Eventos y actividades disponibles para registrarse
  const eventosProgramados = [
    { 
      id: 1, 
      nombre: "IngeniOTIC 2025", 
      fecha: "2025-06-15",
      descripcion: "Evento de innovación tecnológica organizado por la facultad de Ingeniería.",
      horas: 8,
      lugar: "Auditorio Mayor",
      categoria: "Académico"
    },
    { 
      id: 2, 
      nombre: "UNAB Fest", 
      fecha: "2025-05-28",
      descripcion: "Festival cultural con actividades artísticas y musicales para toda la comunidad universitaria.",
      horas: 6,
      lugar: "Campus El Jardín",
      categoria: "Cultural"
    },
    { 
      id: 3, 
      nombre: "Semana de Ingeniería", 
      fecha: "2025-07-10",
      descripcion: "Conferencias, talleres y competencias organizadas por la facultad de Ingeniería.",
      horas: 10,
      lugar: "Bloque D",
      categoria: "Académico"
    },
    { 
      id: 4, 
      nombre: "ULIBRO 2025", 
      fecha: "2025-08-20",
      descripcion: "Feria del libro con presentaciones de autores nacionales e internacionales.",
      horas: 5,
      lugar: "Centro de Convenciones Neomundo",
      categoria: "Cultural"
    },
    {
      id: 5,
      nombre: "Voluntariado Comunitario",
      fecha: "2025-06-05",
      descripcion: "Programa de voluntariado en comunidades vulnerables de la región.",
      horas: 20,
      lugar: "Varios lugares",
      categoria: "Social"
    }
  ];

  // Categorías de horas libres
  const categorias = [
    {
      nombre: "Académicas",
      descripcion: "Participación en eventos, conferencias y talleres académicos",
      horasAcumuladas: 20,
      color: "bg-blue-100 text-blue-800"
    },
    {
      nombre: "Culturales",
      descripcion: "Actividades artísticas, musicales y culturales",
      horasAcumuladas: 5,
      color: "bg-purple-100 text-purple-800"
    },
    {
      nombre: "Deportivas",
      descripcion: "Participación en eventos deportivos y representación institucional",
      horasAcumuladas: 0,
      color: "bg-yellow-100 text-yellow-800"
    },
    {
      nombre: "Sociales",
      descripcion: "Voluntariado y actividades de proyección social",
      horasAcumuladas: 10,
      color: "bg-green-100 text-green-800"
    }
  ];
  
  // Requisitos y normativas
  const requisitos = [
    "Cada estudiante debe completar un mínimo de 48 horas libres para poder graduarse.",
    "Las horas deben estar distribuidas en al menos dos categorías diferentes.",
    "La participación en eventos debe ser certificada por el organizador a través del portal.",
    "Las horas de voluntariado deben ser verificadas por el coordinador del programa de voluntariado.",
    "El máximo de horas que se pueden acumular en un solo evento es de 20 horas.",
    "Las horas libres deben completarse antes del último semestre académico."
  ];

  // Formatear fecha para mostrar
  const formatDate = (dateString) => {
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('es-ES', options);
  };

  // Función para clasificar el color del estado
  const getEstadoClass = (estado) => {
    switch (estado) {
      case 'Verificado':
        return 'bg-green-100 text-green-800';
      case 'Pendiente':
        return 'bg-yellow-100 text-yellow-800';
      case 'Rechazado':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="flex flex-col min-h-screen">
      {/* Hero Section - Versión reducida para la página de horas libres */}
      <div className="bg-green-700 text-white py-10">
        <div className="container mx-auto px-4">
          <h1 className="text-3xl font-bold mb-2">Horas Libres</h1>
          <p className="opacity-90">
            Gestiona tus horas libres, eventos registrados y certificados
          </p>
        </div>
      </div>
      
      {/* Main Content */}
      <div className="flex-grow bg-gray-50 py-8">
        <div className="container mx-auto px-4">
          
          {/* Resumen de Horas Libres */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <div className="flex flex-col md:flex-row">
              <div className="md:w-3/4 pr-0 md:pr-8">
                <h2 className="text-xl font-bold text-gray-800 mb-4">Resumen de Horas Libres</h2>
                
                {/* Progreso General */}
                <div className="mb-6">
                  <div className="flex justify-between mb-1">
                    <h3 className="font-medium text-gray-700">Progreso Total</h3>
                    <span className="text-sm font-medium text-gray-700">
                      {porcentajeCompletado.toFixed(0)}% Completado
                    </span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2.5 mb-2">
                    <div 
                      className="bg-green-600 h-2.5 rounded-full" 
                      style={{ width: `${porcentajeCompletado}%` }}
                    ></div>
                  </div>
                  <p className="text-sm text-gray-600">
                    {horasFaltantes > 0 
                      ? `Te faltan ${horasFaltantes} horas para completar el requisito.`
                      : "¡Has completado todas las horas requeridas!"
                    }
                  </p>
                </div>
                
                {/* Estadísticas por Categoría */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                  {categorias.map((categoria, index) => (
                    <div key={index} className={`${categoria.color} rounded-lg p-4`}>
                      <h4 className="font-semibold mb-1">{categoria.nombre}</h4>
                      <p className="text-sm mb-2">{categoria.descripcion}</p>
                      <div className="flex justify-between items-center">
                        <span className="text-xs">Horas acumuladas</span>
                        <span className="text-lg font-bold">{categoria.horasAcumuladas}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              
              <div className="md:w-1/4 mt-6 md:mt-0">
                <div className="bg-green-50 rounded-lg p-6 h-full">
                  <div className="flex items-center justify-center mb-4">
                    <div className="h-24 w-24 rounded-full bg-green-100 flex items-center justify-center">
                      <span className="text-3xl font-bold text-green-700">{horasLibres}</span>
                    </div>
                  </div>
                  <div className="text-center">
                    <h3 className="text-lg font-semibold text-gray-800 mb-1">Horas Acumuladas</h3>
                    <p className="text-sm text-gray-600 mb-3">De {horasRequeridas} horas requeridas</p>
                    <Link 
                      to="/eventos-disponibles"
                      className="inline-block bg-green-700 hover:bg-green-800 text-white text-sm font-medium py-2 px-4 rounded transition duration-300 w-full"
                    >
                      Inscribirme a Eventos
                    </Link>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          {/* Tabs de navegación */}
          <div className="bg-white rounded-lg shadow-md mb-8">
            <div className="border-b border-gray-200">
              <nav className="flex space-x-8 px-6">
                <button
                  onClick={() => setActiveTab('resumen')} 
                  className={`py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === 'resumen' 
                      ? 'border-green-700 text-green-700' 
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  Resumen y Eventos
                </button>
                <button
                  onClick={() => setActiveTab('historial')}
                  className={`py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === 'historial' 
                      ? 'border-green-700 text-green-700' 
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  Historial Completo
                </button>
                <button
                  onClick={() => setActiveTab('normativas')}
                  className={`py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === 'normativas' 
                      ? 'border-green-700 text-green-700' 
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  Normativas
                </button>
                <button
                  onClick={() => setActiveTab('certificados')}
                  className={`py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === 'certificados' 
                      ? 'border-green-700 text-green-700' 
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  Subir Certificados
                </button>
              </nav>
            </div>
            
            {/* Contenido de las tabs */}
            <div className="p-6">
              {/* Tab: Resumen y Eventos */}
              {activeTab === 'resumen' && (
                <div>
                  <div className="mb-8">
                    <div className="flex justify-between items-center mb-4">
                      <h3 className="text-lg font-semibold text-gray-800">Eventos Registrados</h3>
                      <Link 
                        to="/eventos-registrados"
                        className="text-green-700 hover:text-green-800 text-sm font-medium inline-flex items-center"
                      >
                        Ver todos
                        <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                        </svg>
                      </Link>
                    </div>
                    
                    {eventosRegistrados.length > 0 ? (
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {eventosRegistrados.map((evento) => (
                          <div key={evento.id} className="border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow">
                            <div className="p-4">
                              <h4 className="font-semibold text-gray-800 mb-2">{evento.nombre}</h4>
                              
                              <div className="flex items-center text-sm text-gray-600 mb-4">
                                <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                </svg>
                                {formatDate(evento.fecha)}
                              </div>
                              
                              <div className="flex justify-between items-center">
                                <Link 
                                  to={`/eventos-registrados?id=${evento.id}`}
                                  className="text-green-700 hover:text-green-800 text-sm font-medium inline-flex items-center"
                                >
                                  Ver detalles
                                  <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                                  </svg>
                                </Link>
                                
                                <span className="bg-blue-100 text-blue-800 text-xs font-medium py-1 px-2 rounded">
                                  Registrado
                                </span>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="bg-gray-50 border border-gray-200 rounded-lg p-8 text-center">
                        <svg className="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                        </svg>
                        <h4 className="text-lg font-medium text-gray-800 mb-2">No hay eventos registrados</h4>
                        <p className="text-gray-600 mb-4">Actualmente no tienes eventos registrados. Explora los eventos disponibles y regístrate.</p>
                        <Link 
                          to="/eventos-disponibles" 
                          className="inline-block bg-green-700 hover:bg-green-800 text-white font-medium py-2 px-4 rounded transition duration-300"
                        >
                          Ver Eventos Disponibles
                        </Link>
                      </div>
                    )}
                  </div>
                  
                  <div className="mb-4">
                    <div className="flex justify-between items-center mb-4">
                      <h3 className="text-lg font-semibold text-gray-800">Próximos Eventos Recomendados</h3>
                      <Link 
                        to="/eventos-disponibles"
                        className="text-green-700 hover:text-green-800 text-sm font-medium inline-flex items-center"
                      >
                        Ver todos
                        <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                        </svg>
                      </Link>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      {eventosProgramados.slice(0, 3).map((evento) => (
                        <div key={evento.id} className="border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow">
                          <div className="h-32 bg-gray-200 flex items-center justify-center">
                            {/* Placeholder para imágenes reales */}
                            <div className={`w-full h-full flex items-center justify-center ${evento.id % 2 === 0 ? 'bg-blue-100' : 'bg-green-100'}`}>
                              <svg className="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                              </svg>
                            </div>
                          </div>
                          
                          <div className="p-4">
                            <div className="flex justify-between items-start mb-2">
                              <h4 className="font-semibold text-gray-800">{evento.nombre}</h4>
                              <span className="bg-green-100 text-green-800 text-xs font-medium py-1 px-2 rounded">
                                {evento.horas} horas
                              </span>
                            </div>
                            
                            <div className="flex items-center text-sm text-gray-600 mb-2">
                              <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                              </svg>
                              {formatDate(evento.fecha)}
                            </div>
                            
                            <div className="flex items-center text-sm text-gray-600 mb-3">
                              <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                              </svg>
                              {evento.lugar}
                            </div>
                            
                            <p className="text-sm text-gray-600 mb-3 line-clamp-2">
                              {evento.descripcion}
                            </p>
                            
                            <div className="flex justify-between items-center">
                              <Link 
                                to={`/eventos-disponibles?id=${evento.id}`}
                                className="text-green-700 hover:text-green-800 text-sm font-medium inline-flex items-center"
                              >
                                Más información
                                <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                                </svg>
                              </Link>
                              
                              <Link 
                                to={`/eventos-disponibles?id=${evento.id}&register=true`}
                                className="text-white bg-green-700 hover:bg-green-800 text-sm font-medium py-1 px-3 rounded transition duration-300"
                              >
                                Inscribirme
                              </Link>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}
              
              {/* Tab: Historial Completo */}
              {activeTab === 'historial' && (
                <div>
                  <h3 className="text-lg font-semibold text-gray-800 mb-4">Historial de Horas Libres</h3>
                  
                  <div className="bg-white border border-gray-200 rounded-lg overflow-hidden mb-6">
                    <div className="overflow-x-auto">
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actividad</th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tipo</th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Horas</th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {historialEventos.map((evento) => (
                            <tr key={evento.id} className="hover:bg-gray-50 transition">
                              <td className="px-6 py-4 whitespace-nowrap">
                                <div className="flex items-center">
                                  <div>
                                    <div className="text-sm font-medium text-gray-900">{evento.nombre}</div>
                                    <div className="text-sm text-gray-500">{evento.descripcion}</div>
                                  </div>
                                </div>
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {formatDate(evento.fecha)}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap">
                                <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                                  {evento.tipo}
                                </span>
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {evento.horas}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap">
                                <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getEstadoClass(evento.estado)}`}>
                                  {evento.estado}
                                </span>
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                <Link to={`/eventos-registrados?id=${evento.id}`} className="text-green-700 hover:text-green-900 mr-3">Ver</Link>
                                <button className="text-gray-600 hover:text-gray-900">Descargar</button>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                  
                  {/* Filtros y búsqueda */}
                  <div className="flex flex-col md:flex-row gap-4 bg-gray-50 p-4 rounded-lg">
                    <div className="md:w-1/4">
                      <label htmlFor="fechaHasta" className="block text-sm font-medium text-gray-700 mb-1">Hasta</label>
                      <input type="date" id="fechaHasta" name="fechaHasta" className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-green-500 focus:border-green-500 sm:text-sm rounded-md" />
                    </div>
                  </div>
                </div>
              )}
              
              {/* Tab: Normativas */}
              {activeTab === 'normativas' && (
                <div>
                  <h3 className="text-lg font-semibold text-gray-800 mb-4">Normativas y Requisitos</h3>
                  
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                    <div className="flex items-start">
                      <div className="flex-shrink-0">
                        <svg className="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                          <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                        </svg>
                      </div>
                      <div className="ml-3">
                        <h4 className="text-sm leading-5 font-medium text-blue-800">Información importante</h4>
                        <div className="mt-1 text-sm leading-5 text-blue-700">
                          <p>Las horas libres son un requisito para la graduación. Asegúrate de revisar la normativa vigente y cumplir con los requisitos establecidos.</p>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-white border border-gray-200 rounded-lg overflow-hidden mb-6">
                    <div className="p-6">
                      <h4 className="text-md font-semibold text-gray-800 mb-4">Requisitos Generales</h4>
                      <ul className="space-y-2 text-sm text-gray-600 mb-6">
                        {requisitos.map((requisito, index) => (
                          <li key={index} className="flex items-start">
                            <svg className="h-5 w-5 text-green-500 mr-2 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                            </svg>
                            <span>{requisito}</span>
                          </li>
                        ))}
                      </ul>
                      
                      <h4 className="text-md font-semibold text-gray-800 mb-4">Categorías de Horas Libres</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {categorias.map((categoria, index) => (
                          <div key={index} className={`${categoria.color} rounded-lg p-4`}>
                            <h5 className="font-semibold mb-2">{categoria.nombre}</h5>
                            <p className="text-sm mb-2">{categoria.descripcion}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
                    <div className="p-6">
                      <h4 className="text-md font-semibold text-gray-800 mb-4">Preguntas Frecuentes</h4>
                      
                      <div className="space-y-4">
                        <div className="border-b border-gray-200 pb-4">
                          <h5 className="font-medium text-gray-800 mb-2">¿Cómo puedo registrar mis horas libres?</h5>
                          <p className="text-sm text-gray-600">
                            Puedes registrar tus horas libres de tres formas: inscribiéndote en eventos oficiales de la universidad a través del portal, subiendo certificados de participación en actividades externas, o solicitando la validación de voluntariados y otras actividades al Departamento de Bienestar Universitario.
                          </p>
                        </div>
                        
                        <div className="border-b border-gray-200 pb-4">
                          <h5 className="font-medium text-gray-800 mb-2">¿Cuándo debo completar mis horas libres?</h5>
                          <p className="text-sm text-gray-600">
                            Se recomienda completar las horas libres progresivamente a lo largo de la carrera. El plazo máximo para completarlas es antes de iniciar el último semestre académico.
                          </p>
                        </div>
                        
                        <div className="border-b border-gray-200 pb-4">
                          <h5 className="font-medium text-gray-800 mb-2">¿Qué sucede si no completo mis horas libres?</h5>
                          <p className="text-sm text-gray-600">
                            Las horas libres son un requisito para la graduación. Si no se completan, no se podrá iniciar el proceso de grado hasta cumplir con este requisito.
                          </p>
                        </div>
                        
                        <div>
                          <h5 className="font-medium text-gray-800 mb-2">¿Puedo transferir horas de una categoría a otra?</h5>
                          <p className="text-sm text-gray-600">
                            No es posible transferir horas entre categorías. Se debe cumplir con el mínimo establecido para cada categoría según lo establecido en la normativa vigente.
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              
              {/* Tab: Subir Certificados */}
              {activeTab === 'certificados' && (
                <div>
                  <h3 className="text-lg font-semibold text-gray-800 mb-4">Subir Certificados</h3>
                  
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
                    <div className="flex items-start">
                      <div className="flex-shrink-0">
                        <svg className="h-5 w-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                          <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                        </svg>
                      </div>
                      <div className="ml-3">
                        <h4 className="text-sm leading-5 font-medium text-yellow-800">Importante</h4>
                        <div className="mt-1 text-sm leading-5 text-yellow-700">
                          <p>Los certificados deben estar en formato PDF y no superar los 5MB. La validación puede tomar hasta 5 días hábiles.</p>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-white border border-gray-200 rounded-lg overflow-hidden mb-6">
                    <div className="p-6">
                      <form>
                        <div className="space-y-6">
                          <div>
                            <label htmlFor="actividad" className="block text-sm font-medium text-gray-700">Nombre de la Actividad</label>
                            <input type="text" name="actividad" id="actividad" className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-green-500 focus:border-green-500 sm:text-sm" placeholder="Ej: Taller de Liderazgo" />
                          </div>
                          
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                              <label htmlFor="tipoActividad" className="block text-sm font-medium text-gray-700">Tipo de Actividad</label>
                              <select id="tipoActividad" name="tipoActividad" className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-green-500 focus:border-green-500 sm:text-sm">
                                <option value="">Selecciona un tipo</option>
                                <option value="Evento">Evento</option>
                                <option value="Voluntariado">Voluntariado</option>
                                <option value="Curso">Curso</option>
                                <option value="Otro">Otro</option>
                              </select>
                            </div>
                            
                            <div>
                              <label htmlFor="categoria" className="block text-sm font-medium text-gray-700">Categoría</label>
                              <select id="categoria" name="categoria" className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-green-500 focus:border-green-500 sm:text-sm">
                                <option value="">Selecciona una categoría</option>
                                <option value="Académicas">Académicas</option>
                                <option value="Culturales">Culturales</option>
                                <option value="Deportivas">Deportivas</option>
                                <option value="Sociales">Sociales</option>
                              </select>
                            </div>
                          </div>
                          
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                              <label htmlFor="fechaActividad" className="block text-sm font-medium text-gray-700">Fecha de la Actividad</label>
                              <input type="date" name="fechaActividad" id="fechaActividad" className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-green-500 focus:border-green-500 sm:text-sm" />
                            </div>
                            
                            <div>
                              <label htmlFor="horasAcumuladas" className="block text-sm font-medium text-gray-700">Horas Acumuladas</label>
                              <input type="number" name="horasAcumuladas" id="horasAcumuladas" min="1" max="20" className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-green-500 focus:border-green-500 sm:text-sm" placeholder="Ej: 8" />
                            </div>
                          </div>
                          
                          <div>
                            <label htmlFor="descripcion" className="block text-sm font-medium text-gray-700">Descripción de la Actividad</label>
                            <textarea id="descripcion" name="descripcion" rows="3" className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-green-500 focus:border-green-500 sm:text-sm" placeholder="Describe brevemente la actividad realizada"></textarea>
                          </div>
                          
                          <div>
                            <label className="block text-sm font-medium text-gray-700">Certificado</label>
                            <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
                              <div className="space-y-1 text-center">
                                <svg className="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
                                  <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                                </svg>
                                <div className="flex text-sm text-gray-600">
                                  <label htmlFor="file-upload" className="relative cursor-pointer bg-white rounded-md font-medium text-green-600 hover:text-green-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-green-500">
                                    <span>Subir un archivo</span>
                                    <input id="file-upload" name="file-upload" type="file" className="sr-only" />
                                  </label>
                                  <p className="pl-1">o arrastrar y soltar</p>
                                </div>
                                <p className="text-xs text-gray-500">PDF hasta 5MB</p>
                              </div>
                            </div>
                          </div>
                        </div>
                        
                        <div className="mt-6 flex justify-end">
                          <button type="button" className="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 mr-3">
                            Cancelar
                          </button>
                          <button type="submit" className="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-700 hover:bg-green-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                            Enviar para Validación
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>
                  
                  <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
                    <div className="px-6 py-4 border-b border-gray-200">
                      <h4 className="text-md font-semibold text-gray-800">Certificados Enviados Recientemente</h4>
                    </div>
                    <div className="p-6">
                      <div className="space-y-4">
                        <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                          <div>
                            <h5 className="font-medium text-gray-800">Curso de Primeros Auxilios</h5>
                            <p className="text-sm text-gray-600">Enviado: 10 de mayo de 2025</p>
                          </div>
                          <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                            En revisión
                          </span>
                        </div>
                        
                        <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                          <div>
                            <h5 className="font-medium text-gray-800">Voluntariado Cruz Roja</h5>
                            <p className="text-sm text-gray-600">Enviado: 05 de mayo de 2025</p>
                          </div>
                          <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                            Aprobado
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
          
          {/* Enlaces Rápidos */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <h3 className="text-xl font-bold text-gray-800 mb-4">Accesos Rápidos</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <Link 
                to="/eventos-disponibles"
                className="bg-green-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-green-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                <h4 className="font-semibold text-center">Ver Eventos</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Eventos disponibles</p>
              </Link>
              
              <Link 
                to="/eventos-registrados"
                className="bg-blue-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-blue-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
                </svg>
                <h4 className="font-semibold text-center">Mis Eventos</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Eventos registrados</p>
              </Link>
              
              <Link 
                to="/perfil"
                className="bg-purple-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-purple-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
                <h4 className="font-semibold text-center">Mi Perfil</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Ver mi información</p>
              </Link>
              
              <a 
                href="https://aulavirtual.unab.edu.co" 
                target="_blank" 
                rel="noopener noreferrer"
                className="bg-yellow-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-yellow-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path d="M12 14l9-5-9-5-9 5 9 5z"></path>
                  <path d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z"></path>
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222"></path>
                </svg>
                <h4 className="font-semibold text-center">Aula Virtual</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Accede a tus materias</p>
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default HorasLibres
>>>> pages/Inicio.jsx
import React from 'react';
import Hero from '../components/Hero';
import ProfilePreview from '../components/ProfilePreview';
import QuickLinks from '../components/QuickLinks';
import EventsPreview from '../components/EventsPreview';
import Announcements from '../components/Announcements';
import HorasLibresStats from '../components/HorasLibresStats';
import WelcomeBanner from '../components/WelcomeBanner';

const Inicio = () => {
  return (
    <div className="flex flex-col min-h-screen">
      {/* Hero Section */}
      <Hero />
      
      {/* Main Content */}
      <div className="flex-grow bg-gray-50 py-8">
        <div className="container mx-auto px-4">
          {/* Welcome Banner */}
          <WelcomeBanner />
          
          {/* Profile and Quick Links Section */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="md:col-span-1">
              <ProfilePreview />
            </div>
            <div className="md:col-span-2">
              <QuickLinks />
            </div>
          </div>
          
          {/* Stats Section */}
          <div className="mb-8">
            <HorasLibresStats />
          </div>
          
          {/* Events Preview Section */}
          <div className="mb-8" id="eventos">
            <EventsPreview />
          </div>
          
          {/* Announcements Section */}
          <div className="mb-8" id="anuncios">
            <Announcements />
          </div>
        </div>
      </div>
    </div>
  );
};

export default Inicio;
>>>> pages/Login.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import ThemeToggleButton from '../components/ThemeToggleButton';

const Login = () => {
  const navigate = useNavigate();
  const { login } = useAuth();
  const [formData, setFormData] = useState({
    username: '',
    password: ''
  });
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);

  // Credenciales válidas
  const VALID_CREDENTIALS = {
    username: 'admin',
    password: '1234'
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });

    // Limpiar errores al cambiar el valor
    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: ''
      });
    }
  };

  const validateForm = () => {
    let tempErrors = {};
    let formIsValid = true;

    // Validar usuario
    if (!formData.username.trim()) {
      tempErrors.username = 'El usuario es requerido';
      formIsValid = false;
    }

    // Validar contraseña
    if (!formData.password.trim()) {
      tempErrors.password = 'La contraseña es requerida';
      formIsValid = false;
    }

    setErrors(tempErrors);
    return formIsValid;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    // Limpiar errores previos
    setErrors({});
    
    if (!validateForm()) {
      return;
    }

    setIsLoading(true);

    // Simular tiempo de carga
    setTimeout(() => {
      // Verificar credenciales
      if (formData.username === VALID_CREDENTIALS.username && 
          formData.password === VALID_CREDENTIALS.password) {
        // Login exitoso - actualizar contexto y redirigir
        login(formData.username);
        navigate('/');
      } else {
        // Credenciales incorrectas
        setErrors({
          general: 'Usuario o contraseña incorrectos. Intenta nuevamente.'
        });
      }
      setIsLoading(false);
    }, 1000);
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 transition-colors duration-200">
      <div className="max-w-md w-full space-y-8">
        {/* Botón de tema en la esquina superior derecha */}
        <div className="flex justify-end">
          <ThemeToggleButton />
        </div>
        
        {/* Header */}
        <div className="text-center">
          <div className="mx-auto h-16 w-16 rounded-full bg-green-100 dark:bg-green-800 flex items-center justify-center mb-4">
            <svg className="h-8 w-8 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
            </svg>
          </div>
          <h2 className="text-3xl font-bold text-gray-900 dark:text-white">Portal Estudiantil UNAB</h2>
          <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
            Ingresa con tus credenciales para continuar
          </p>
        </div>

        {/* Formulario de Login */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-8 transition-colors duration-200">
          <form className="space-y-6" onSubmit={handleSubmit}>
            {/* Error general */}
            {errors.general && (
              <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
                <div className="flex items-start">
                  <div className="flex-shrink-0">
                    <svg className="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-red-700 dark:text-red-400">{errors.general}</p>
                  </div>
                </div>
              </div>
            )}

            {/* Campo Usuario */}
            <div>
              <label htmlFor="username" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Usuario
              </label>
              <input
                id="username"
                name="username"
                type="text"
                value={formData.username}
                onChange={handleChange}
                className={`mt-1 block w-full px-3 py-2 border ${
                  errors.username 
                    ? 'border-red-300 dark:border-red-600 focus:ring-red-500 focus:border-red-500' 
                    : 'border-gray-300 dark:border-gray-600 focus:ring-green-500 focus:border-green-500'
                } rounded-md shadow-sm focus:outline-none sm:text-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-colors duration-200`}
                placeholder="Ingresa tu usuario"
                disabled={isLoading}
              />
              {errors.username && (
                <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.username}</p>
              )}
            </div>

            {/* Campo Contraseña */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Contraseña
              </label>
              <input
                id="password"
                name="password"
                type="password"
                value={formData.password}
                onChange={handleChange}
                className={`mt-1 block w-full px-3 py-2 border ${
                  errors.password 
                    ? 'border-red-300 dark:border-red-600 focus:ring-red-500 focus:border-red-500' 
                    : 'border-gray-300 dark:border-gray-600 focus:ring-green-500 focus:border-green-500'
                } rounded-md shadow-sm focus:outline-none sm:text-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-colors duration-200`}
                placeholder="Ingresa tu contraseña"
                disabled={isLoading}
              />
              {errors.password && (
                <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.password}</p>
              )}
            </div>

            {/* Botón de Submit */}
            <div>
              <button
                type="submit"
                disabled={isLoading}
                className={`w-full flex justify-center items-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${
                  isLoading 
                    ? 'bg-gray-400 dark:bg-gray-600 cursor-not-allowed' 
                    : 'bg-green-700 dark:bg-green-600 hover:bg-green-800 dark:hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 dark:focus:ring-green-400'
                } transition duration-300`}
              >
                {isLoading ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Iniciando sesión...
                  </>
                ) : (
                  'Iniciar Sesión'
                )}
              </button>
            </div>
          </form>

          {/* Información de prueba */}
          <div className="mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
            <div className="flex items-start">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <h4 className="text-sm font-medium text-blue-800 dark:text-blue-400">Credenciales de prueba</h4>
                <div className="mt-1 text-sm text-blue-700 dark:text-blue-300">
                  <p><strong>Usuario:</strong> admin</p>
                  <p><strong>Contraseña:</strong> 1234</p>
                </div>
              </div>
            </div>
          </div>

          {/* Enlaces adicionales */}
          <div className="mt-6 text-center space-y-2">
            <p className="text-sm text-gray-600 dark:text-gray-400">
              ¿No tienes una cuenta?{' '}
              <button 
                onClick={() => navigate('/crear-usuario')}
                className="text-green-700 dark:text-green-400 hover:text-green-600 dark:hover:text-green-300 font-medium"
                disabled={isLoading}
              >
                Regístrate aquí
              </button>
            </p>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              <button className="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300" disabled={isLoading}>
                ¿Olvidaste tu contraseña?
              </button>
            </p>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center">
          <p className="text-xs text-gray-500 dark:text-gray-400">
            © 2025 Universidad Autónoma de Bucaramanga (UNAB). Todos los derechos reservados.
          </p>
        </div>
      </div>
    </div>
  );
};

export default Login;
>>>> pages/Perfil.jsx
import React, { useState } from 'react';
import { estudiante } from '../data/estudiante';
import { Link } from 'react-router-dom';

const Perfil = () => {
  const [activeTab, setActiveTab] = useState('general');
  
  // Usando los datos de estudiante.js
  const { nombre, semestre, cursos, horasLibres, eventosRegistrados } = estudiante;
  
  // Información complementaria que sería parte de un perfil completo
  const informacionPersonal = {
    nombreCompleto: nombre, // Usando el nombre del archivo estudiante.js
    documento: "1098765432",
    email: `${nombre.toLowerCase().replace(/\s+/g, '.')}@unab.edu.co`,
    telefono: "+57 321 456 7890",
    fechaNacimiento: "1999-05-12",
    programa: "Ingeniería de Sistemas",
    facultad: "Facultad de Ingeniería",
    estado: "Activo",
    modalidad: "Presencial"
  };
  
  const informacionAcademica = {
    promedio: 4.2,
    creditos: {
      cursados: 76,
      aprobados: 72,
      totales: 160
    },
    horario: [
      { dia: "Lunes", materia: "Álgebra Lineal", horario: "7:00 - 9:00", salon: "D1-301" },
      { dia: "Lunes", materia: "Programación II", horario: "9:00 - 11:00", salon: "D5-202" },
      { dia: "Miércoles", materia: "Álgebra Lineal", horario: "7:00 - 9:00", salon: "D1-301" },
      { dia: "Miércoles", materia: "Estadística", horario: "9:00 - 11:00", salon: "D3-401" },
      { dia: "Viernes", materia: "Programación II", horario: "7:00 - 9:00", salon: "D5-202" },
      { dia: "Viernes", materia: "Estadística", horario: "11:00 - 13:00", salon: "D3-401" }
    ],
    notas: [
      { curso: "Cálculo I", nota: 4.5, creditos: 4, semestre: "2024-1" },
      { curso: "Fundamentos de Programación", nota: 4.8, creditos: 4, semestre: "2024-1" },
      { curso: "Física I", nota: 3.9, creditos: 4, semestre: "2024-1" },
      { curso: "Matemáticas Discretas", nota: 4.0, creditos: 3, semestre: "2024-1" },
      { curso: "Cálculo II", nota: 4.2, creditos: 4, semestre: "2024-2" },
      { curso: "Programación I", nota: 4.6, creditos: 4, semestre: "2024-2" },
      { curso: "Física II", nota: 3.7, creditos: 4, semestre: "2024-2" }
    ]
  };

  // Formatear fecha para mostrar
  const formatDate = (dateString) => {
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('es-ES', options);
  };

  return (
    <div className="flex flex-col min-h-screen">
      {/* Hero Section - Versión reducida para la página de perfil */}
      <div className="bg-green-700 text-white py-10">
        <div className="container mx-auto px-4">
          <h1 className="text-3xl font-bold mb-2">Mi Perfil</h1>
          <p className="opacity-90">
            Gestiona tu información académica y personal
          </p>
        </div>
      </div>
      
      {/* Main Content */}
      <div className="flex-grow bg-gray-50 py-8">
        <div className="container mx-auto px-4">
          
          {/* Perfil General */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <div className="flex flex-col md:flex-row gap-6">
              {/* Foto y acciones rápidas */}
              <div className="md:w-1/4">
                <div className="flex flex-col items-center">
                  {/* Avatar/Foto */}
                  <div className="h-32 w-32 rounded-full bg-green-100 flex items-center justify-center mb-4">
                    <span className="text-5xl font-bold text-green-700">{nombre.charAt(0)}</span>
                  </div>
                  
                  <h2 className="text-xl font-bold text-gray-800 text-center mb-1">{nombre}</h2>
                  <p className="text-gray-600 mb-4 text-center">Semestre {semestre} • {informacionPersonal.programa}</p>
                  
                  <div className="w-full space-y-2">
                    <Link to="/perfil/editar" className="w-full block text-center bg-green-700 hover:bg-green-800 text-white rounded-lg py-2 px-4 transition duration-300">
                      Editar Perfil
                    </Link>
                    <Link to="/cambiar-contrasena" className="w-full block text-center border border-gray-300 hover:bg-gray-100 text-gray-700 rounded-lg py-2 px-4 transition duration-300">
                      Cambiar Contraseña
                    </Link>
                  </div>
                </div>
              </div>
              
              {/* Información principal y tabs */}
              <div className="md:w-3/4">
                {/* Tabs de navegación */}
                <div className="border-b border-gray-200 mb-6">
                  <nav className="flex space-x-8">
                    <button
                      onClick={() => setActiveTab('general')} 
                      className={`py-4 px-1 border-b-2 font-medium text-sm ${
                        activeTab === 'general' 
                          ? 'border-green-700 text-green-700' 
                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                      }`}
                    >
                      Información General
                    </button>
                    <button
                      onClick={() => setActiveTab('academica')}
                      className={`py-4 px-1 border-b-2 font-medium text-sm ${
                        activeTab === 'academica' 
                          ? 'border-green-700 text-green-700' 
                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                      }`}
                    >
                      Información Académica
                    </button>
                    <button
                      onClick={() => setActiveTab('eventos')}
                      className={`py-4 px-1 border-b-2 font-medium text-sm ${
                        activeTab === 'eventos' 
                          ? 'border-green-700 text-green-700' 
                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                      }`}
                    >
                      Eventos y Actividades
                    </button>
                  </nav>
                </div>
                
                {/* Contenido de las tabs */}
                <div className="pb-4">
                  {/* Tab: Información General */}
                  {activeTab === 'general' && (
                    <div>
                      <h3 className="text-lg font-semibold text-gray-800 mb-4">Información Personal</h3>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4 mb-6">
                        <div>
                          <p className="text-sm text-gray-500">Nombre Completo</p>
                          <p className="font-medium">{informacionPersonal.nombreCompleto}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-500">Documento</p>
                          <p className="font-medium">{informacionPersonal.documento}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-500">Correo Electrónico</p>
                          <p className="font-medium">{informacionPersonal.email}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-500">Teléfono</p>
                          <p className="font-medium">{informacionPersonal.telefono}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-500">Fecha de Nacimiento</p>
                          <p className="font-medium">{formatDate(informacionPersonal.fechaNacimiento)}</p>
                        </div>
                      </div>
                      
                      <h3 className="text-lg font-semibold text-gray-800 mb-4">Información del Programa</h3>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                        <div>
                          <p className="text-sm text-gray-500">Programa</p>
                          <p className="font-medium">{informacionPersonal.programa}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-500">Facultad</p>
                          <p className="font-medium">{informacionPersonal.facultad}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-500">Estado</p>
                          <p className="font-medium">
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                              {informacionPersonal.estado}
                            </span>
                          </p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-500">Modalidad</p>
                          <p className="font-medium">{informacionPersonal.modalidad}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-500">Semestre Actual</p>
                          <p className="font-medium">{semestre}</p>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {/* Tab: Información Académica */}
                  {activeTab === 'academica' && (
                    <div>
                      {/* Resumen académico */}
                      <div className="mb-8">
                        <h3 className="text-lg font-semibold text-gray-800 mb-4">Resumen Académico</h3>
                        
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <div className="bg-blue-50 rounded-lg p-4">
                            <p className="text-sm text-gray-500">Promedio Acumulado</p>
                            <p className="text-3xl font-bold text-blue-700">{informacionAcademica.promedio.toFixed(1)}</p>
                          </div>
                          <div className="bg-green-50 rounded-lg p-4">
                            <p className="text-sm text-gray-500">Créditos Aprobados</p>
                            <p className="text-3xl font-bold text-green-700">
                              {informacionAcademica.creditos.aprobados}/{informacionAcademica.creditos.totales}
                            </p>
                          </div>
                          <div className="bg-yellow-50 rounded-lg p-4">
                            <p className="text-sm text-gray-500">Progreso de Carrera</p>
                            <p className="text-3xl font-bold text-yellow-700">
                              {Math.round((informacionAcademica.creditos.aprobados / informacionAcademica.creditos.totales) * 100)}%
                            </p>
                          </div>
                        </div>
                      </div>
                      
                      {/* Materias actuales */}
                      <div className="mb-8">
                        <h3 className="text-lg font-semibold text-gray-800 mb-4">Materias Actuales</h3>
                        <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
                          <ul className="divide-y divide-gray-200">
                            {cursos.map((curso, index) => (
                              <li key={index} className="p-4 hover:bg-gray-50 transition">
                                <div className="flex items-center justify-between">
                                  <div>
                                    <h4 className="font-medium text-gray-800">{curso}</h4>
                                  </div>
                                  <Link 
                                    to={`/curso/${curso.toLowerCase().replace(/\s+/g, '-')}`}
                                    className="text-green-700 hover:text-green-800 text-sm font-medium inline-flex items-center"
                                  >
                                    Ver detalles
                                    <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                                    </svg>
                                  </Link>
                                </div>
                              </li>
                            ))}
                          </ul>
                        </div>
                      </div>
                      
                      {/* Horario semanal */}
                      <div className="mb-8">
                        <h3 className="text-lg font-semibold text-gray-800 mb-4">Horario Semanal</h3>
                        <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
                          <div className="overflow-x-auto">
                            <table className="min-w-full divide-y divide-gray-200">
                              <thead className="bg-gray-50">
                                <tr>
                                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Día</th>
                                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Materia</th>
                                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Horario</th>
                                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Salón</th>
                                </tr>
                              </thead>
                              <tbody className="bg-white divide-y divide-gray-200">
                                {informacionAcademica.horario.map((clase, index) => (
                                  <tr key={index} className="hover:bg-gray-50 transition">
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-800">{clase.dia}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-800">{clase.materia}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">{clase.horario}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">{clase.salon}</td>
                                  </tr>
                                ))}
                              </tbody>
                            </table>
                          </div>
                        </div>
                      </div>
                      
                      {/* Historial de notas */}
                      <div>
                        <h3 className="text-lg font-semibold text-gray-800 mb-4">Historial de Notas</h3>
                        <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
                          <div className="overflow-x-auto">
                            <table className="min-w-full divide-y divide-gray-200">
                              <thead className="bg-gray-50">
                                <tr>
                                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Curso</th>
                                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nota</th>
                                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Créditos</th>
                                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Semestre</th>
                                </tr>
                              </thead>
                              <tbody className="bg-white divide-y divide-gray-200">
                                {informacionAcademica.notas.map((curso, index) => (
                                  <tr key={index} className="hover:bg-gray-50 transition">
                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-800">{curso.curso}</td>
                                    <td className={`px-6 py-4 whitespace-nowrap text-sm font-medium ${
                                      curso.nota >= 4.0 ? 'text-green-700' : curso.nota >= 3.0 ? 'text-yellow-700' : 'text-red-700'
                                    }`}>
                                      {curso.nota.toFixed(1)}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">{curso.creditos}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">{curso.semestre}</td>
                                  </tr>
                                ))}
                              </tbody>
                            </table>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {/* Tab: Eventos y Actividades */}
                  {activeTab === 'eventos' && (
                    <div>
                      {/* Progreso de horas libres */}
                      <div className="mb-8">
                        <h3 className="text-lg font-semibold text-gray-800 mb-4">Progreso de Horas Libres</h3>
                        
                        <div className="bg-white border border-gray-200 rounded-lg p-6">
                          <div className="flex justify-between mb-2">
                            <span className="text-sm font-medium text-gray-700">
                              Progreso Total: {horasLibres}/60 horas
                            </span>
                            <span className="text-sm font-medium text-gray-700">
                              {Math.round((horasLibres / 60) * 100)}% Completado
                            </span>
                          </div>
                          <div className="w-full bg-gray-200 rounded-full h-2.5 mb-4">
                            <div 
                              className="bg-green-600 h-2.5 rounded-full" 
                              style={{ width: `${Math.min(100, (horasLibres / 60) * 100)}%` }}
                            ></div>
                          </div>
                          
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                            <div className="bg-green-50 rounded-lg p-4 flex items-center">
                              <div className="h-10 w-10 rounded-full bg-green-100 flex items-center justify-center mr-3">
                                <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                                </svg>
                              </div>
                              <div>
                                <p className="text-sm text-gray-500">Horas Acumuladas</p>
                                <p className="text-xl font-bold text-green-700">{horasLibres}</p>
                              </div>
                            </div>
                            <div className="bg-blue-50 rounded-lg p-4 flex items-center">
                              <div className="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center mr-3">
                                <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                                </svg>
                              </div>
                              <div>
                                <p className="text-sm text-gray-500">Horas Requeridas</p>
                                <p className="text-xl font-bold text-blue-700">60</p>
                              </div>
                            </div>
                            <div className="bg-yellow-50 rounded-lg p-4 flex items-center">
                              <div className="h-10 w-10 rounded-full bg-yellow-100 flex items-center justify-center mr-3">
                                <svg className="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                              </div>
                              <div>
                                <p className="text-sm text-gray-500">Horas Faltantes</p>
                                <p className="text-xl font-bold text-yellow-700">{60 - horasLibres}</p>
                              </div>
                            </div>
                          </div>
                          
                          <div className="flex justify-between">
                            <Link 
                              to="/horas-libres" 
                              className="text-green-700 hover:text-green-800 text-sm font-medium inline-flex items-center"
                            >
                              Ver detalles completos
                              <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                              </svg>
                            </Link>
                            <Link 
                              to="/eventos-disponibles" 
                              className="bg-green-700 hover:bg-green-800 text-white text-sm font-medium py-2 px-4 rounded transition duration-300"
                            >
                              Ver Eventos Disponibles
                            </Link>
                          </div>
                        </div>
                      </div>
                      
                      {/* Eventos registrados */}
                      <div>
                        <div className="flex justify-between items-center mb-4">
                          <h3 className="text-lg font-semibold text-gray-800">Eventos Registrados</h3>
                          <Link 
                            to="/eventos-registrados"
                            className="text-green-700 hover:text-green-800 text-sm font-medium inline-flex items-center"
                          >
                            Ver todos
                            <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                            </svg>
                          </Link>
                        </div>
                        
                        {eventosRegistrados.length > 0 ? (
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            {eventosRegistrados.map((evento) => (
                              <div key={evento.id} className="border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow">
                                <div className="p-4">
                                  <h4 className="font-semibold text-gray-800 mb-2">{evento.nombre}</h4>
                                  
                                  <div className="flex items-center text-sm text-gray-600 mb-4">
                                    <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                    </svg>
                                    {formatDate(evento.fecha)}
                                  </div>
                                  
                                  <div className="flex justify-between items-center">
                                    <Link 
                                      to={`/eventos-registrados?id=${evento.id}`}
                                      className="text-green-700 hover:text-green-800 text-sm font-medium inline-flex items-center"
                                    >
                                      Ver detalles
                                      <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                                      </svg>
                                    </Link>
                                    
                                    <span className="bg-blue-100 text-blue-800 text-xs font-medium py-1 px-2 rounded">
                                      Registrado
                                    </span>
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <div className="bg-gray-50 border border-gray-200 rounded-lg p-8 text-center">
                            <svg className="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                            </svg>
                            <h4 className="text-lg font-medium text-gray-800 mb-2">No hay eventos registrados</h4>
                            <p className="text-gray-600 mb-4">Actualmente no tienes eventos registrados. Explora los eventos disponibles y regístrate.</p>
                            <Link 
                              to="/eventos-disponibles" 
                              className="inline-block bg-green-700 hover:bg-green-800 text-white font-medium py-2 px-4 rounded transition duration-300"
                            >
                              Ver Eventos Disponibles
                            </Link>
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
          
          {/* Accesos Rápidos */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <h3 className="text-xl font-bold text-gray-800 mb-4">Accesos Rápidos</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <a 
                href="https://cosmos.unab.edu.co" 
                target="_blank" 
                rel="noopener noreferrer"
                className="bg-purple-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-purple-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                </svg>
                <h4 className="font-semibold text-center">Portal de Notas</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Consulta tus calificaciones</p>
              </a>
              
              <a 
                href="https://aulavirtual.unab.edu.co" 
                target="_blank" 
                rel="noopener noreferrer"
                className="bg-blue-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-blue-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path d="M12 14l9-5-9-5-9 5 9 5z"></path>
                  <path d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z"></path>
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222"></path>
                </svg>
                <h4 className="font-semibold text-center">Aula Virtual</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Accede a tus materias</p>
              </a>
              
              <Link 
                to="/horas-libres"
                className="bg-yellow-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-yellow-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <h4 className="font-semibold text-center">Horas Libres</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Gestiona tus horas libres</p>
              </Link>
              
              <Link 
                to="/eventos-disponibles"
                className="bg-red-100 rounded-lg p-4 flex flex-col items-center justify-center h-full transition-transform hover:scale-105"
              >
                <svg className="w-8 h-8 text-red-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z"></path>
                </svg>
                <h4 className="font-semibold text-center">Eventos</h4>
                <p className="text-xs text-gray-600 text-center mt-1">Eventos disponibles</p>
              </Link>
            </div>
          </div>
          
          {/* Historial de Actividades */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <h3 className="text-xl font-bold text-gray-800 mb-4">Historial de Actividades Recientes</h3>
            
            <div className="flow-root">
              <ul className="-mb-8">
                <li>
                  <div className="relative pb-8">
                    <span className="absolute top-5 left-5 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true"></span>
                    <div className="relative flex items-start space-x-3">
                      <div className="relative">
                        <div className="h-10 w-10 rounded-full bg-green-100 flex items-center justify-center ring-8 ring-white">
                          <svg className="h-5 w-5 text-green-700" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                          </svg>
                        </div>
                      </div>
                      <div className="min-w-0 flex-1">
                        <div>
                          <p className="text-sm text-gray-800">Te has registrado para el evento <span className="font-medium">Hackathon UNAB</span></p>
                          <p className="mt-0.5 text-sm text-gray-500">15 de mayo de 2025 - 10:23 AM</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </li>
                
                <li>
                  <div className="relative pb-8">
                    <span className="absolute top-5 left-5 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true"></span>
                    <div className="relative flex items-start space-x-3">
                      <div className="relative">
                        <div className="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center ring-8 ring-white">
                          <svg className="h-5 w-5 text-blue-700" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
                          </svg>
                        </div>
                      </div>
                      <div className="min-w-0 flex-1">
                        <div>
                          <p className="text-sm text-gray-800">Has recibido una notificación sobre <span className="font-medium">Inscripciones para Semestre 2025-2</span></p>
                          <p className="mt-0.5 text-sm text-gray-500">15 de mayo de 2025 - 9:15 AM</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </li>
                
                <li>
                  <div className="relative pb-8">
                    <span className="absolute top-5 left-5 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true"></span>
                    <div className="relative flex items-start space-x-3">
                      <div className="relative">
                        <div className="h-10 w-10 rounded-full bg-yellow-100 flex items-center justify-center ring-8 ring-white">
                          <svg className="h-5 w-5 text-yellow-700" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                          </svg>
                        </div>
                      </div>
                      <div className="min-w-0 flex-1">
                        <div>
                          <p className="text-sm text-gray-800">Horas libres actualizadas: <span className="font-medium">+8 horas</span> por evento <span className="font-medium">Taller de Innovación</span></p>
                          <p className="mt-0.5 text-sm text-gray-500">12 de mayo de 2025 - 11:45 AM</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </li>
                
                <li>
                  <div className="relative pb-0">
                    <div className="relative flex items-start space-x-3">
                      <div className="relative">
                        <div className="h-10 w-10 rounded-full bg-green-100 flex items-center justify-center ring-8 ring-white">
                          <svg className="h-5 w-5 text-green-700" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                          </svg>
                        </div>
                      </div>
                      <div className="min-w-0 flex-1">
                        <div>
                          <p className="text-sm text-gray-800">Te has registrado para el evento <span className="font-medium">Taller de Innovación</span></p>
                          <p className="mt-0.5 text-sm text-gray-500">10 de mayo de 2025 - 9:30 AM</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </li>
              </ul>
            </div>
            
            <div className="mt-6 text-center">
              <button className="text-green-700 hover:text-green-800 text-sm font-medium">
                Ver historial completo
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Perfil;
>>>> reportWebVitals.js
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

>>>> setupTests.js
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
